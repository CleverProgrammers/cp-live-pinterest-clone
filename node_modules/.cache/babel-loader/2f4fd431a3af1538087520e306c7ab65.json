{"ast":null,"code":"import firebase from '@firebase/app';\nimport { __extends, __awaiter, __generator, __assign, __spreadArrays } from 'tslib';\nimport { FirebaseError } from '@firebase/util';\nimport { Component } from '@firebase/component';\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @fileoverview Constants used in the Firebase Storage library.\r\n */\n\n/**\r\n * Domain name for firebase storage.\r\n */\n\nvar DEFAULT_HOST = 'firebasestorage.googleapis.com';\n/**\r\n * The key in Firebase config json for the storage bucket.\r\n */\n\nvar CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\n/**\r\n * 2 minutes\r\n *\r\n * The timeout for all operations except upload.\r\n */\n\nvar DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\n/**\r\n * 10 minutes\r\n *\r\n * The timeout for upload.\r\n */\n\nvar DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\n\nvar FirebaseStorageError =\n/** @class */\nfunction (_super) {\n  __extends(FirebaseStorageError, _super);\n\n  function FirebaseStorageError(code, message) {\n    var _this = _super.call(this, prependCode(code), \"Firebase Storage: \" + message + \" (\" + prependCode(code) + \")\") || this;\n\n    _this.customData = {\n      serverResponse: null\n    }; // Without this, `instanceof FirebaseStorageError`, in tests for example,\n    // returns false.\n\n    Object.setPrototypeOf(_this, FirebaseStorageError.prototype);\n    return _this;\n  }\n\n  FirebaseStorageError.prototype.codeEquals = function (code) {\n    return prependCode(code) === this.code;\n  };\n\n  Object.defineProperty(FirebaseStorageError.prototype, \"message\", {\n    get: function () {\n      if (this.customData.serverResponse) {\n        return this.message + \"\\n\" + this.customData.serverResponse;\n      } else {\n        return this.message;\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FirebaseStorageError.prototype, \"serverResponse\", {\n    get: function () {\n      return this.customData.serverResponse;\n    },\n    set: function (serverResponse) {\n      this.customData.serverResponse = serverResponse;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return FirebaseStorageError;\n}(FirebaseError);\n\nvar Code = {\n  // Shared between all platforms\n  UNKNOWN: 'unknown',\n  OBJECT_NOT_FOUND: 'object-not-found',\n  BUCKET_NOT_FOUND: 'bucket-not-found',\n  PROJECT_NOT_FOUND: 'project-not-found',\n  QUOTA_EXCEEDED: 'quota-exceeded',\n  UNAUTHENTICATED: 'unauthenticated',\n  UNAUTHORIZED: 'unauthorized',\n  RETRY_LIMIT_EXCEEDED: 'retry-limit-exceeded',\n  INVALID_CHECKSUM: 'invalid-checksum',\n  CANCELED: 'canceled',\n  // JS specific\n  INVALID_EVENT_NAME: 'invalid-event-name',\n  INVALID_URL: 'invalid-url',\n  INVALID_DEFAULT_BUCKET: 'invalid-default-bucket',\n  NO_DEFAULT_BUCKET: 'no-default-bucket',\n  CANNOT_SLICE_BLOB: 'cannot-slice-blob',\n  SERVER_FILE_WRONG_SIZE: 'server-file-wrong-size',\n  NO_DOWNLOAD_URL: 'no-download-url',\n  INVALID_ARGUMENT: 'invalid-argument',\n  INVALID_ARGUMENT_COUNT: 'invalid-argument-count',\n  APP_DELETED: 'app-deleted',\n  INVALID_ROOT_OPERATION: 'invalid-root-operation',\n  INVALID_FORMAT: 'invalid-format',\n  INTERNAL_ERROR: 'internal-error',\n  UNSUPPORTED_ENVIRONMENT: 'unsupported-environment'\n};\n\nfunction prependCode(code) {\n  return 'storage/' + code;\n}\n\nfunction unknown() {\n  var message = 'An unknown error occurred, please check the error payload for ' + 'server response.';\n  return new FirebaseStorageError(Code.UNKNOWN, message);\n}\n\nfunction objectNotFound(path) {\n  return new FirebaseStorageError(Code.OBJECT_NOT_FOUND, \"Object '\" + path + \"' does not exist.\");\n}\n\nfunction quotaExceeded(bucket) {\n  return new FirebaseStorageError(Code.QUOTA_EXCEEDED, \"Quota for bucket '\" + bucket + \"' exceeded, please view quota on \" + 'https://firebase.google.com/pricing/.');\n}\n\nfunction unauthenticated() {\n  var message = 'User is not authenticated, please authenticate using Firebase ' + 'Authentication and try again.';\n  return new FirebaseStorageError(Code.UNAUTHENTICATED, message);\n}\n\nfunction unauthorized(path) {\n  return new FirebaseStorageError(Code.UNAUTHORIZED, \"User does not have permission to access '\" + path + \"'.\");\n}\n\nfunction retryLimitExceeded() {\n  return new FirebaseStorageError(Code.RETRY_LIMIT_EXCEEDED, 'Max retry time for operation exceeded, please try again.');\n}\n\nfunction canceled() {\n  return new FirebaseStorageError(Code.CANCELED, 'User canceled the upload/download.');\n}\n\nfunction invalidUrl(url) {\n  return new FirebaseStorageError(Code.INVALID_URL, \"Invalid URL '\" + url + \"'.\");\n}\n\nfunction invalidDefaultBucket(bucket) {\n  return new FirebaseStorageError(Code.INVALID_DEFAULT_BUCKET, \"Invalid default bucket '\" + bucket + \"'.\");\n}\n\nfunction noDefaultBucket() {\n  return new FirebaseStorageError(Code.NO_DEFAULT_BUCKET, 'No default bucket ' + \"found. Did you set the '\" + CONFIG_STORAGE_BUCKET_KEY + \"' property when initializing the app?\");\n}\n\nfunction cannotSliceBlob() {\n  return new FirebaseStorageError(Code.CANNOT_SLICE_BLOB, 'Cannot slice blob for upload. Please retry the upload.');\n}\n\nfunction serverFileWrongSize() {\n  return new FirebaseStorageError(Code.SERVER_FILE_WRONG_SIZE, 'Server recorded incorrect upload file size, please retry the upload.');\n}\n\nfunction noDownloadURL() {\n  return new FirebaseStorageError(Code.NO_DOWNLOAD_URL, 'The given file does not have any download URLs.');\n}\n\nfunction invalidArgument(message) {\n  return new FirebaseStorageError(Code.INVALID_ARGUMENT, message);\n}\n\nfunction appDeleted() {\n  return new FirebaseStorageError(Code.APP_DELETED, 'The Firebase app was deleted.');\n}\n/**\r\n * @param name - The name of the operation that was invalid.\r\n */\n\n\nfunction invalidRootOperation(name) {\n  return new FirebaseStorageError(Code.INVALID_ROOT_OPERATION, \"The operation '\" + name + \"' cannot be performed on a root reference, create a non-root \" + \"reference using child, such as .child('file.png').\");\n}\n/**\r\n * @param format - The format that was not valid.\r\n * @param message - A message describing the format violation.\r\n */\n\n\nfunction invalidFormat(format, message) {\n  return new FirebaseStorageError(Code.INVALID_FORMAT, \"String does not match format '\" + format + \"': \" + message);\n}\n/**\r\n * @param message - A message describing the internal error.\r\n */\n\n\nfunction internalError(message) {\n  throw new FirebaseStorageError(Code.INTERNAL_ERROR, 'Internal error: ' + message);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar StringFormat = {\n  RAW: 'raw',\n  BASE64: 'base64',\n  BASE64URL: 'base64url',\n  DATA_URL: 'data_url'\n};\n\nvar StringData =\n/** @class */\nfunction () {\n  function StringData(data, contentType) {\n    this.data = data;\n    this.contentType = contentType || null;\n  }\n\n  return StringData;\n}();\n\nfunction dataFromString(format, stringData) {\n  switch (format) {\n    case StringFormat.RAW:\n      return new StringData(utf8Bytes_(stringData));\n\n    case StringFormat.BASE64:\n    case StringFormat.BASE64URL:\n      return new StringData(base64Bytes_(format, stringData));\n\n    case StringFormat.DATA_URL:\n      return new StringData(dataURLBytes_(stringData), dataURLContentType_(stringData));\n    // do nothing\n  } // assert(false);\n\n\n  throw unknown();\n}\n\nfunction utf8Bytes_(value) {\n  var b = [];\n\n  for (var i = 0; i < value.length; i++) {\n    var c = value.charCodeAt(i);\n\n    if (c <= 127) {\n      b.push(c);\n    } else {\n      if (c <= 2047) {\n        b.push(192 | c >> 6, 128 | c & 63);\n      } else {\n        if ((c & 64512) === 55296) {\n          // The start of a surrogate pair.\n          var valid = i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\n\n          if (!valid) {\n            // The second surrogate wasn't there.\n            b.push(239, 191, 189);\n          } else {\n            var hi = c;\n            var lo = value.charCodeAt(++i);\n            c = 65536 | (hi & 1023) << 10 | lo & 1023;\n            b.push(240 | c >> 18, 128 | c >> 12 & 63, 128 | c >> 6 & 63, 128 | c & 63);\n          }\n        } else {\n          if ((c & 64512) === 56320) {\n            // Invalid low surrogate.\n            b.push(239, 191, 189);\n          } else {\n            b.push(224 | c >> 12, 128 | c >> 6 & 63, 128 | c & 63);\n          }\n        }\n      }\n    }\n  }\n\n  return new Uint8Array(b);\n}\n\nfunction percentEncodedBytes_(value) {\n  var decoded;\n\n  try {\n    decoded = decodeURIComponent(value);\n  } catch (e) {\n    throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\n  }\n\n  return utf8Bytes_(decoded);\n}\n\nfunction base64Bytes_(format, value) {\n  switch (format) {\n    case StringFormat.BASE64:\n      {\n        var hasMinus = value.indexOf('-') !== -1;\n        var hasUnder = value.indexOf('_') !== -1;\n\n        if (hasMinus || hasUnder) {\n          var invalidChar = hasMinus ? '-' : '_';\n          throw invalidFormat(format, \"Invalid character '\" + invalidChar + \"' found: is it base64url encoded?\");\n        }\n\n        break;\n      }\n\n    case StringFormat.BASE64URL:\n      {\n        var hasPlus = value.indexOf('+') !== -1;\n        var hasSlash = value.indexOf('/') !== -1;\n\n        if (hasPlus || hasSlash) {\n          var invalidChar = hasPlus ? '+' : '/';\n          throw invalidFormat(format, \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\");\n        }\n\n        value = value.replace(/-/g, '+').replace(/_/g, '/');\n        break;\n      }\n    // do nothing\n  }\n\n  var bytes;\n\n  try {\n    bytes = atob(value);\n  } catch (e) {\n    throw invalidFormat(format, 'Invalid character found');\n  }\n\n  var array = new Uint8Array(bytes.length);\n\n  for (var i = 0; i < bytes.length; i++) {\n    array[i] = bytes.charCodeAt(i);\n  }\n\n  return array;\n}\n\nvar DataURLParts =\n/** @class */\nfunction () {\n  function DataURLParts(dataURL) {\n    this.base64 = false;\n    this.contentType = null;\n    var matches = dataURL.match(/^data:([^,]+)?,/);\n\n    if (matches === null) {\n      throw invalidFormat(StringFormat.DATA_URL, \"Must be formatted 'data:[<mediatype>][;base64],<data>\");\n    }\n\n    var middle = matches[1] || null;\n\n    if (middle != null) {\n      this.base64 = endsWith(middle, ';base64');\n      this.contentType = this.base64 ? middle.substring(0, middle.length - ';base64'.length) : middle;\n    }\n\n    this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n  }\n\n  return DataURLParts;\n}();\n\nfunction dataURLBytes_(dataUrl) {\n  var parts = new DataURLParts(dataUrl);\n\n  if (parts.base64) {\n    return base64Bytes_(StringFormat.BASE64, parts.rest);\n  } else {\n    return percentEncodedBytes_(parts.rest);\n  }\n}\n\nfunction dataURLContentType_(dataUrl) {\n  var parts = new DataURLParts(dataUrl);\n  return parts.contentType;\n}\n\nfunction endsWith(s, end) {\n  var longEnough = s.length >= end.length;\n\n  if (!longEnough) {\n    return false;\n  }\n\n  return s.substring(s.length - end.length) === end;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar TaskEvent = {\n  /** Triggered whenever the task changes or progress is updated. */\n  STATE_CHANGED: 'state_changed'\n};\nvar InternalTaskState = {\n  RUNNING: 'running',\n  PAUSING: 'pausing',\n  PAUSED: 'paused',\n  SUCCESS: 'success',\n  CANCELING: 'canceling',\n  CANCELED: 'canceled',\n  ERROR: 'error'\n};\nvar TaskState = {\n  /** The task is currently transferring data. */\n  RUNNING: 'running',\n\n  /** The task was paused by the user. */\n  PAUSED: 'paused',\n\n  /** The task completed successfully. */\n  SUCCESS: 'success',\n\n  /** The task was canceled. */\n  CANCELED: 'canceled',\n\n  /** The task failed with an error. */\n  ERROR: 'error'\n};\n\nfunction taskStateFromInternalTaskState(state) {\n  switch (state) {\n    case InternalTaskState.RUNNING:\n    case InternalTaskState.PAUSING:\n    case InternalTaskState.CANCELING:\n      return TaskState.RUNNING;\n\n    case InternalTaskState.PAUSED:\n      return TaskState.PAUSED;\n\n    case InternalTaskState.SUCCESS:\n      return TaskState.SUCCESS;\n\n    case InternalTaskState.CANCELED:\n      return TaskState.CANCELED;\n\n    case InternalTaskState.ERROR:\n      return TaskState.ERROR;\n\n    default:\n      // TODO(andysoto): assert(false);\n      return TaskState.ERROR;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar ErrorCode;\n\n(function (ErrorCode) {\n  ErrorCode[ErrorCode[\"NO_ERROR\"] = 0] = \"NO_ERROR\";\n  ErrorCode[ErrorCode[\"NETWORK_ERROR\"] = 1] = \"NETWORK_ERROR\";\n  ErrorCode[ErrorCode[\"ABORT\"] = 2] = \"ABORT\";\n})(ErrorCode || (ErrorCode = {}));\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * We use this instead of goog.net.XhrIo because goog.net.XhrIo is hyuuuuge and\r\n * doesn't work in React Native on Android.\r\n */\n\n\nvar NetworkXhrIo =\n/** @class */\nfunction () {\n  function NetworkXhrIo() {\n    var _this = this;\n\n    this.sent_ = false;\n    this.xhr_ = new XMLHttpRequest();\n    this.errorCode_ = ErrorCode.NO_ERROR;\n    this.sendPromise_ = new Promise(function (resolve) {\n      _this.xhr_.addEventListener('abort', function () {\n        _this.errorCode_ = ErrorCode.ABORT;\n        resolve(_this);\n      });\n\n      _this.xhr_.addEventListener('error', function () {\n        _this.errorCode_ = ErrorCode.NETWORK_ERROR;\n        resolve(_this);\n      });\n\n      _this.xhr_.addEventListener('load', function () {\n        resolve(_this);\n      });\n    });\n  }\n  /**\r\n   * @override\r\n   */\n\n\n  NetworkXhrIo.prototype.send = function (url, method, body, headers) {\n    if (this.sent_) {\n      throw internalError('cannot .send() more than once');\n    }\n\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n\n    if (headers !== undefined) {\n      for (var key in headers) {\n        if (headers.hasOwnProperty(key)) {\n          this.xhr_.setRequestHeader(key, headers[key].toString());\n        }\n      }\n    }\n\n    if (body !== undefined) {\n      this.xhr_.send(body);\n    } else {\n      this.xhr_.send();\n    }\n\n    return this.sendPromise_;\n  };\n  /**\r\n   * @override\r\n   */\n\n\n  NetworkXhrIo.prototype.getErrorCode = function () {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorCode() before sending');\n    }\n\n    return this.errorCode_;\n  };\n  /**\r\n   * @override\r\n   */\n\n\n  NetworkXhrIo.prototype.getStatus = function () {\n    if (!this.sent_) {\n      throw internalError('cannot .getStatus() before sending');\n    }\n\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  };\n  /**\r\n   * @override\r\n   */\n\n\n  NetworkXhrIo.prototype.getResponseText = function () {\n    if (!this.sent_) {\n      throw internalError('cannot .getResponseText() before sending');\n    }\n\n    return this.xhr_.responseText;\n  };\n  /**\r\n   * Aborts the request.\r\n   * @override\r\n   */\n\n\n  NetworkXhrIo.prototype.abort = function () {\n    this.xhr_.abort();\n  };\n  /**\r\n   * @override\r\n   */\n\n\n  NetworkXhrIo.prototype.getResponseHeader = function (header) {\n    return this.xhr_.getResponseHeader(header);\n  };\n  /**\r\n   * @override\r\n   */\n\n\n  NetworkXhrIo.prototype.addUploadProgressListener = function (listener) {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  };\n  /**\r\n   * @override\r\n   */\n\n\n  NetworkXhrIo.prototype.removeUploadProgressListener = function (listener) {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  };\n\n  return NetworkXhrIo;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Factory-like class for creating XhrIo instances.\r\n */\n\n\nvar XhrIoPool =\n/** @class */\nfunction () {\n  function XhrIoPool() {}\n\n  XhrIoPool.prototype.createXhrIo = function () {\n    return new NetworkXhrIo();\n  };\n\n  return XhrIoPool;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction isJustDef(p) {\n  return p !== void 0;\n} // eslint-disable-next-line @typescript-eslint/ban-types\n\n\nfunction isFunction(p) {\n  return typeof p === 'function';\n}\n\nfunction isNonArrayObject(p) {\n  return typeof p === 'object' && !Array.isArray(p);\n}\n\nfunction isString(p) {\n  return typeof p === 'string' || p instanceof String;\n}\n\nfunction isNativeBlob(p) {\n  return isNativeBlobDefined() && p instanceof Blob;\n}\n\nfunction isNativeBlobDefined() {\n  return typeof Blob !== 'undefined';\n}\n\nfunction validateNumber(argument, minValue, maxValue, value) {\n  if (value < minValue) {\n    throw new FirebaseStorageError(Code.INVALID_ARGUMENT, \"Invalid value for '\" + argument + \"'. Expected \" + minValue + \" or greater.\");\n  }\n\n  if (value > maxValue) {\n    throw new FirebaseStorageError(Code.INVALID_ARGUMENT, \"Invalid value for '\" + argument + \"'. Expected \" + maxValue + \" or less.\");\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction getBlobBuilder() {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n/**\r\n * Concatenates one or more values together and converts them to a Blob.\r\n *\r\n * @param args The values that will make up the resulting blob.\r\n * @return The blob.\r\n */\n\n\nfunction getBlob() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  var BlobBuilder = getBlobBuilder();\n\n  if (BlobBuilder !== undefined) {\n    var bb = new BlobBuilder();\n\n    for (var i = 0; i < args.length; i++) {\n      bb.append(args[i]);\n    }\n\n    return bb.getBlob();\n  } else {\n    if (isNativeBlobDefined()) {\n      return new Blob(args);\n    } else {\n      throw new FirebaseStorageError(Code.UNSUPPORTED_ENVIRONMENT, \"This browser doesn't seem to support creating Blobs\");\n    }\n  }\n}\n/**\r\n * Slices the blob. The returned blob contains data from the start byte\r\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\r\n *\r\n * @param blob The blob to be sliced.\r\n * @param start Index of the starting byte.\r\n * @param end Index of the ending byte.\r\n * @return The blob slice or null if not supported.\r\n */\n\n\nfunction sliceBlob(blob, start, end) {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  } else if (blob.mozSlice) {\n    return blob.mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n\n  return null;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @param opt_elideCopy - If true, doesn't copy mutable input data\r\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\r\n *     modified after this blob's construction.\r\n */\n\n\nvar FbsBlob =\n/** @class */\nfunction () {\n  function FbsBlob(data, elideCopy) {\n    var size = 0;\n    var blobType = '';\n\n    if (isNativeBlob(data)) {\n      this.data_ = data;\n      size = data.size;\n      blobType = data.type;\n    } else if (data instanceof ArrayBuffer) {\n      if (elideCopy) {\n        this.data_ = new Uint8Array(data);\n      } else {\n        this.data_ = new Uint8Array(data.byteLength);\n        this.data_.set(new Uint8Array(data));\n      }\n\n      size = this.data_.length;\n    } else if (data instanceof Uint8Array) {\n      if (elideCopy) {\n        this.data_ = data;\n      } else {\n        this.data_ = new Uint8Array(data.length);\n        this.data_.set(data);\n      }\n\n      size = data.length;\n    }\n\n    this.size_ = size;\n    this.type_ = blobType;\n  }\n\n  FbsBlob.prototype.size = function () {\n    return this.size_;\n  };\n\n  FbsBlob.prototype.type = function () {\n    return this.type_;\n  };\n\n  FbsBlob.prototype.slice = function (startByte, endByte) {\n    if (isNativeBlob(this.data_)) {\n      var realBlob = this.data_;\n      var sliced = sliceBlob(realBlob, startByte, endByte);\n\n      if (sliced === null) {\n        return null;\n      }\n\n      return new FbsBlob(sliced);\n    } else {\n      var slice = new Uint8Array(this.data_.buffer, startByte, endByte - startByte);\n      return new FbsBlob(slice, true);\n    }\n  };\n\n  FbsBlob.getBlob = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    if (isNativeBlobDefined()) {\n      var blobby = args.map(function (val) {\n        if (val instanceof FbsBlob) {\n          return val.data_;\n        } else {\n          return val;\n        }\n      });\n      return new FbsBlob(getBlob.apply(null, blobby));\n    } else {\n      var uint8Arrays = args.map(function (val) {\n        if (isString(val)) {\n          return dataFromString(StringFormat.RAW, val).data;\n        } else {\n          // Blobs don't exist, so this has to be a Uint8Array.\n          return val.data_;\n        }\n      });\n      var finalLength_1 = 0;\n      uint8Arrays.forEach(function (array) {\n        finalLength_1 += array.byteLength;\n      });\n      var merged_1 = new Uint8Array(finalLength_1);\n      var index_1 = 0;\n      uint8Arrays.forEach(function (array) {\n        for (var i = 0; i < array.length; i++) {\n          merged_1[index_1++] = array[i];\n        }\n      });\n      return new FbsBlob(merged_1, true);\n    }\n  };\n\n  FbsBlob.prototype.uploadData = function () {\n    return this.data_;\n  };\n\n  return FbsBlob;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar Location =\n/** @class */\nfunction () {\n  function Location(bucket, path) {\n    this.bucket = bucket;\n    this.path_ = path;\n  }\n\n  Object.defineProperty(Location.prototype, \"path\", {\n    get: function () {\n      return this.path_;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Location.prototype, \"isRoot\", {\n    get: function () {\n      return this.path.length === 0;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  Location.prototype.fullServerUrl = function () {\n    var encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n  };\n\n  Location.prototype.bucketOnlyServerUrl = function () {\n    var encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o';\n  };\n\n  Location.makeFromBucketSpec = function (bucketString) {\n    var bucketLocation;\n\n    try {\n      bucketLocation = Location.makeFromUrl(bucketString);\n    } catch (e) {\n      // Not valid URL, use as-is. This lets you put bare bucket names in\n      // config.\n      return new Location(bucketString, '');\n    }\n\n    if (bucketLocation.path === '') {\n      return bucketLocation;\n    } else {\n      throw invalidDefaultBucket(bucketString);\n    }\n  };\n\n  Location.makeFromUrl = function (url) {\n    var location = null;\n    var bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\n\n    function gsModify(loc) {\n      if (loc.path.charAt(loc.path.length - 1) === '/') {\n        loc.path_ = loc.path_.slice(0, -1);\n      }\n    }\n\n    var gsPath = '(/(.*))?$';\n    var gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n    var gsIndices = {\n      bucket: 1,\n      path: 3\n    };\n\n    function httpModify(loc) {\n      loc.path_ = decodeURIComponent(loc.path);\n    }\n\n    var version = 'v[A-Za-z0-9_]+';\n    var firebaseStorageHost = DEFAULT_HOST.replace(/[.]/g, '\\\\.');\n    var firebaseStoragePath = '(/([^?#]*).*)?$';\n    var firebaseStorageRegExp = new RegExp(\"^https?://\" + firebaseStorageHost + \"/\" + version + \"/b/\" + bucketDomain + \"/o\" + firebaseStoragePath, 'i');\n    var firebaseStorageIndices = {\n      bucket: 1,\n      path: 3\n    };\n    var cloudStorageHost = '(?:storage.googleapis.com|storage.cloud.google.com)';\n    var cloudStoragePath = '([^?#]*)';\n    var cloudStorageRegExp = new RegExp(\"^https?://\" + cloudStorageHost + \"/\" + bucketDomain + \"/\" + cloudStoragePath, 'i');\n    var cloudStorageIndices = {\n      bucket: 1,\n      path: 2\n    };\n    var groups = [{\n      regex: gsRegex,\n      indices: gsIndices,\n      postModify: gsModify\n    }, {\n      regex: firebaseStorageRegExp,\n      indices: firebaseStorageIndices,\n      postModify: httpModify\n    }, {\n      regex: cloudStorageRegExp,\n      indices: cloudStorageIndices,\n      postModify: httpModify\n    }];\n\n    for (var i = 0; i < groups.length; i++) {\n      var group = groups[i];\n      var captures = group.regex.exec(url);\n\n      if (captures) {\n        var bucketValue = captures[group.indices.bucket];\n        var pathValue = captures[group.indices.path];\n\n        if (!pathValue) {\n          pathValue = '';\n        }\n\n        location = new Location(bucketValue, pathValue);\n        group.postModify(location);\n        break;\n      }\n    }\n\n    if (location == null) {\n      throw invalidUrl(url);\n    }\n\n    return location;\n  };\n\n  return Location;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns the Object resulting from parsing the given JSON, or null if the\r\n * given string does not represent a JSON object.\r\n */\n\n\nfunction jsonObjectOrNull(s) {\n  var obj;\n\n  try {\n    obj = JSON.parse(s);\n  } catch (e) {\n    return null;\n  }\n\n  if (isNonArrayObject(obj)) {\n    return obj;\n  } else {\n    return null;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @fileoverview Contains helper methods for manipulating paths.\r\n */\n\n/**\r\n * @return Null if the path is already at the root.\r\n */\n\n\nfunction parent(path) {\n  if (path.length === 0) {\n    return null;\n  }\n\n  var index = path.lastIndexOf('/');\n\n  if (index === -1) {\n    return '';\n  }\n\n  var newPath = path.slice(0, index);\n  return newPath;\n}\n\nfunction child(path, childPath) {\n  var canonicalChildPath = childPath.split('/').filter(function (component) {\n    return component.length > 0;\n  }).join('/');\n\n  if (path.length === 0) {\n    return canonicalChildPath;\n  } else {\n    return path + '/' + canonicalChildPath;\n  }\n}\n/**\r\n * Returns the last component of a path.\r\n * '/foo/bar' -> 'bar'\r\n * '/foo/bar/baz/' -> 'baz/'\r\n * '/a' -> 'a'\r\n */\n\n\nfunction lastComponent(path) {\n  var index = path.lastIndexOf('/', path.length - 2);\n\n  if (index === -1) {\n    return path;\n  } else {\n    return path.slice(index + 1);\n  }\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction makeUrl(urlPart) {\n  return \"https://\" + DEFAULT_HOST + \"/v0\" + urlPart;\n}\n\nfunction makeQueryString(params) {\n  var encode = encodeURIComponent;\n  var queryPart = '?';\n\n  for (var key in params) {\n    if (params.hasOwnProperty(key)) {\n      var nextPart = encode(key) + '=' + encode(params[key]);\n      queryPart = queryPart + nextPart + '&';\n    }\n  } // Chop off the extra '&' or '?' on the end\n\n\n  queryPart = queryPart.slice(0, -1);\n  return queryPart;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction noXform_(metadata, value) {\n  return value;\n}\n\nvar Mapping =\n/** @class */\nfunction () {\n  function Mapping(server, local, writable, xform) {\n    this.server = server;\n    this.local = local || server;\n    this.writable = !!writable;\n    this.xform = xform || noXform_;\n  }\n\n  return Mapping;\n}();\n\nvar mappings_ = null;\n\nfunction xformPath(fullPath) {\n  if (!isString(fullPath) || fullPath.length < 2) {\n    return fullPath;\n  } else {\n    return lastComponent(fullPath);\n  }\n}\n\nfunction getMappings() {\n  if (mappings_) {\n    return mappings_;\n  }\n\n  var mappings = [];\n  mappings.push(new Mapping('bucket'));\n  mappings.push(new Mapping('generation'));\n  mappings.push(new Mapping('metageneration'));\n  mappings.push(new Mapping('name', 'fullPath', true));\n\n  function mappingsXformPath(_metadata, fullPath) {\n    return xformPath(fullPath);\n  }\n\n  var nameMapping = new Mapping('name');\n  nameMapping.xform = mappingsXformPath;\n  mappings.push(nameMapping);\n  /**\r\n   * Coerces the second param to a number, if it is defined.\r\n   */\n\n  function xformSize(_metadata, size) {\n    if (size !== undefined) {\n      return Number(size);\n    } else {\n      return size;\n    }\n  }\n\n  var sizeMapping = new Mapping('size');\n  sizeMapping.xform = xformSize;\n  mappings.push(sizeMapping);\n  mappings.push(new Mapping('timeCreated'));\n  mappings.push(new Mapping('updated'));\n  mappings.push(new Mapping('md5Hash', null, true));\n  mappings.push(new Mapping('cacheControl', null, true));\n  mappings.push(new Mapping('contentDisposition', null, true));\n  mappings.push(new Mapping('contentEncoding', null, true));\n  mappings.push(new Mapping('contentLanguage', null, true));\n  mappings.push(new Mapping('contentType', null, true));\n  mappings.push(new Mapping('metadata', 'customMetadata', true));\n  mappings_ = mappings;\n  return mappings_;\n}\n\nfunction addRef(metadata, service) {\n  function generateRef() {\n    var bucket = metadata['bucket'];\n    var path = metadata['fullPath'];\n    var loc = new Location(bucket, path);\n    return service.makeStorageReference(loc);\n  }\n\n  Object.defineProperty(metadata, 'ref', {\n    get: generateRef\n  });\n}\n\nfunction fromResource(service, resource, mappings) {\n  var metadata = {};\n  metadata['type'] = 'file';\n  var len = mappings.length;\n\n  for (var i = 0; i < len; i++) {\n    var mapping = mappings[i];\n    metadata[mapping.local] = mapping.xform(metadata, resource[mapping.server]);\n  }\n\n  addRef(metadata, service);\n  return metadata;\n}\n\nfunction fromResourceString(service, resourceString, mappings) {\n  var obj = jsonObjectOrNull(resourceString);\n\n  if (obj === null) {\n    return null;\n  }\n\n  var resource = obj;\n  return fromResource(service, resource, mappings);\n}\n\nfunction downloadUrlFromResourceString(metadata, resourceString) {\n  var obj = jsonObjectOrNull(resourceString);\n\n  if (obj === null) {\n    return null;\n  }\n\n  if (!isString(obj['downloadTokens'])) {\n    // This can happen if objects are uploaded through GCS and retrieved\n    // through list, so we don't want to throw an Error.\n    return null;\n  }\n\n  var tokens = obj['downloadTokens'];\n\n  if (tokens.length === 0) {\n    return null;\n  }\n\n  var encode = encodeURIComponent;\n  var tokensList = tokens.split(',');\n  var urls = tokensList.map(function (token) {\n    var bucket = metadata['bucket'];\n    var path = metadata['fullPath'];\n    var urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\n    var base = makeUrl(urlPart);\n    var queryString = makeQueryString({\n      alt: 'media',\n      token: token\n    });\n    return base + queryString;\n  });\n  return urls[0];\n}\n\nfunction toResourceString(metadata, mappings) {\n  var resource = {};\n  var len = mappings.length;\n\n  for (var i = 0; i < len; i++) {\n    var mapping = mappings[i];\n\n    if (mapping.writable) {\n      resource[mapping.server] = metadata[mapping.local];\n    }\n  }\n\n  return JSON.stringify(resource);\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar PREFIXES_KEY = 'prefixes';\nvar ITEMS_KEY = 'items';\n\nfunction fromBackendResponse(service, bucket, resource) {\n  var listResult = {\n    prefixes: [],\n    items: [],\n    nextPageToken: resource['nextPageToken']\n  };\n\n  if (resource[PREFIXES_KEY]) {\n    for (var _i = 0, _a = resource[PREFIXES_KEY]; _i < _a.length; _i++) {\n      var path = _a[_i];\n      var pathWithoutTrailingSlash = path.replace(/\\/$/, '');\n      var reference = service.makeStorageReference(new Location(bucket, pathWithoutTrailingSlash));\n      listResult.prefixes.push(reference);\n    }\n  }\n\n  if (resource[ITEMS_KEY]) {\n    for (var _b = 0, _c = resource[ITEMS_KEY]; _b < _c.length; _b++) {\n      var item = _c[_b];\n      var reference = service.makeStorageReference(new Location(bucket, item['name']));\n      listResult.items.push(reference);\n    }\n  }\n\n  return listResult;\n}\n\nfunction fromResponseString(service, bucket, resourceString) {\n  var obj = jsonObjectOrNull(resourceString);\n\n  if (obj === null) {\n    return null;\n  }\n\n  var resource = obj;\n  return fromBackendResponse(service, bucket, resource);\n}\n\nvar RequestInfo =\n/** @class */\nfunction () {\n  function RequestInfo(url, method,\n  /**\r\n   * Returns the value with which to resolve the request's promise. Only called\r\n   * if the request is successful. Throw from this function to reject the\r\n   * returned Request's promise with the thrown error.\r\n   * Note: The XhrIo passed to this function may be reused after this callback\r\n   * returns. Do not keep a reference to it in any way.\r\n   */\n  handler, timeout) {\n    this.url = url;\n    this.method = method;\n    this.handler = handler;\n    this.timeout = timeout;\n    this.urlParams = {};\n    this.headers = {};\n    this.body = null;\n    this.errorHandler = null;\n    /**\r\n     * Called with the current number of bytes uploaded and total size (-1 if not\r\n     * computable) of the request body (i.e. used to report upload progress).\r\n     */\n\n    this.progressCallback = null;\n    this.successCodes = [200];\n    this.additionalRetryCodes = [];\n  }\n\n  return RequestInfo;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Throws the UNKNOWN FirebaseStorageError if cndn is false.\r\n */\n\n\nfunction handlerCheck(cndn) {\n  if (!cndn) {\n    throw unknown();\n  }\n}\n\nfunction metadataHandler(service, mappings) {\n  function handler(xhr, text) {\n    var metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return metadata;\n  }\n\n  return handler;\n}\n\nfunction listHandler(service, bucket) {\n  function handler(xhr, text) {\n    var listResult = fromResponseString(service, bucket, text);\n    handlerCheck(listResult !== null);\n    return listResult;\n  }\n\n  return handler;\n}\n\nfunction downloadUrlHandler(service, mappings) {\n  function handler(xhr, text) {\n    var metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return downloadUrlFromResourceString(metadata, text);\n  }\n\n  return handler;\n}\n\nfunction sharedErrorHandler(location) {\n  function errorHandler(xhr, err) {\n    var newErr;\n\n    if (xhr.getStatus() === 401) {\n      newErr = unauthenticated();\n    } else {\n      if (xhr.getStatus() === 402) {\n        newErr = quotaExceeded(location.bucket);\n      } else {\n        if (xhr.getStatus() === 403) {\n          newErr = unauthorized(location.path);\n        } else {\n          newErr = err;\n        }\n      }\n    }\n\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n\n  return errorHandler;\n}\n\nfunction objectErrorHandler(location) {\n  var shared = sharedErrorHandler(location);\n\n  function errorHandler(xhr, err) {\n    var newErr = shared(xhr, err);\n\n    if (xhr.getStatus() === 404) {\n      newErr = objectNotFound(location.path);\n    }\n\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n\n  return errorHandler;\n}\n\nfunction getMetadata(service, location, mappings) {\n  var urlPart = location.fullServerUrl();\n  var url = makeUrl(urlPart);\n  var method = 'GET';\n  var timeout = service.maxOperationRetryTime;\n  var requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nfunction list(service, location, delimiter, pageToken, maxResults) {\n  var urlParams = {};\n\n  if (location.isRoot) {\n    urlParams['prefix'] = '';\n  } else {\n    urlParams['prefix'] = location.path + '/';\n  }\n\n  if (delimiter && delimiter.length > 0) {\n    urlParams['delimiter'] = delimiter;\n  }\n\n  if (pageToken) {\n    urlParams['pageToken'] = pageToken;\n  }\n\n  if (maxResults) {\n    urlParams['maxResults'] = maxResults;\n  }\n\n  var urlPart = location.bucketOnlyServerUrl();\n  var url = makeUrl(urlPart);\n  var method = 'GET';\n  var timeout = service.maxOperationRetryTime;\n  var requestInfo = new RequestInfo(url, method, listHandler(service, location.bucket), timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\nfunction getDownloadUrl(service, location, mappings) {\n  var urlPart = location.fullServerUrl();\n  var url = makeUrl(urlPart);\n  var method = 'GET';\n  var timeout = service.maxOperationRetryTime;\n  var requestInfo = new RequestInfo(url, method, downloadUrlHandler(service, mappings), timeout);\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nfunction updateMetadata(service, location, metadata, mappings) {\n  var urlPart = location.fullServerUrl();\n  var url = makeUrl(urlPart);\n  var method = 'PATCH';\n  var body = toResourceString(metadata, mappings);\n  var headers = {\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  var timeout = service.maxOperationRetryTime;\n  var requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nfunction deleteObject(service, location) {\n  var urlPart = location.fullServerUrl();\n  var url = makeUrl(urlPart);\n  var method = 'DELETE';\n  var timeout = service.maxOperationRetryTime;\n\n  function handler(_xhr, _text) {}\n\n  var requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.successCodes = [200, 204];\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nfunction determineContentType_(metadata, blob) {\n  return metadata && metadata['contentType'] || blob && blob.type() || 'application/octet-stream';\n}\n\nfunction metadataForUpload_(location, blob, metadata) {\n  var metadataClone = Object.assign({}, metadata);\n  metadataClone['fullPath'] = location.path;\n  metadataClone['size'] = blob.size();\n\n  if (!metadataClone['contentType']) {\n    metadataClone['contentType'] = determineContentType_(null, blob);\n  }\n\n  return metadataClone;\n}\n\nfunction multipartUpload(service, location, mappings, blob, metadata) {\n  var urlPart = location.bucketOnlyServerUrl();\n  var headers = {\n    'X-Goog-Upload-Protocol': 'multipart'\n  };\n\n  function genBoundary() {\n    var str = '';\n\n    for (var i = 0; i < 2; i++) {\n      str = str + Math.random().toString().slice(2);\n    }\n\n    return str;\n  }\n\n  var boundary = genBoundary();\n  headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n  var metadata_ = metadataForUpload_(location, blob, metadata);\n  var metadataString = toResourceString(metadata_, mappings);\n  var preBlobPart = '--' + boundary + '\\r\\n' + 'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' + metadataString + '\\r\\n--' + boundary + '\\r\\n' + 'Content-Type: ' + metadata_['contentType'] + '\\r\\n\\r\\n';\n  var postBlobPart = '\\r\\n--' + boundary + '--';\n  var body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n\n  var urlParams = {\n    name: metadata_['fullPath']\n  };\n  var url = makeUrl(urlPart);\n  var method = 'POST';\n  var timeout = service.maxUploadRetryTime;\n  var requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * @param current The number of bytes that have been uploaded so far.\r\n * @param total The total number of bytes in the upload.\r\n * @param opt_finalized True if the server has finished the upload.\r\n * @param opt_metadata The upload metadata, should\r\n *     only be passed if opt_finalized is true.\r\n */\n\n\nvar ResumableUploadStatus =\n/** @class */\nfunction () {\n  function ResumableUploadStatus(current, total, finalized, metadata) {\n    this.current = current;\n    this.total = total;\n    this.finalized = !!finalized;\n    this.metadata = metadata || null;\n  }\n\n  return ResumableUploadStatus;\n}();\n\nfunction checkResumeHeader_(xhr, allowed) {\n  var status = null;\n\n  try {\n    status = xhr.getResponseHeader('X-Goog-Upload-Status');\n  } catch (e) {\n    handlerCheck(false);\n  }\n\n  var allowedStatus = allowed || ['active'];\n  handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\n  return status;\n}\n\nfunction createResumableUpload(service, location, mappings, blob, metadata) {\n  var urlPart = location.bucketOnlyServerUrl();\n  var metadataForUpload = metadataForUpload_(location, blob, metadata);\n  var urlParams = {\n    name: metadataForUpload['fullPath']\n  };\n  var url = makeUrl(urlPart);\n  var method = 'POST';\n  var headers = {\n    'X-Goog-Upload-Protocol': 'resumable',\n    'X-Goog-Upload-Command': 'start',\n    'X-Goog-Upload-Header-Content-Length': blob.size(),\n    'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType'],\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  var body = toResourceString(metadataForUpload, mappings);\n  var timeout = service.maxUploadRetryTime;\n\n  function handler(xhr) {\n    checkResumeHeader_(xhr);\n    var url;\n\n    try {\n      url = xhr.getResponseHeader('X-Goog-Upload-URL');\n    } catch (e) {\n      handlerCheck(false);\n    }\n\n    handlerCheck(isString(url));\n    return url;\n  }\n\n  var requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n */\n\n\nfunction getResumableUploadStatus(service, location, url, blob) {\n  var headers = {\n    'X-Goog-Upload-Command': 'query'\n  };\n\n  function handler(xhr) {\n    var status = checkResumeHeader_(xhr, ['active', 'final']);\n    var sizeString = null;\n\n    try {\n      sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n    } catch (e) {\n      handlerCheck(false);\n    }\n\n    if (!sizeString) {\n      // null or empty string\n      handlerCheck(false);\n    }\n\n    var size = Number(sizeString);\n    handlerCheck(!isNaN(size));\n    return new ResumableUploadStatus(size, blob.size(), status === 'final');\n  }\n\n  var method = 'POST';\n  var timeout = service.maxUploadRetryTime;\n  var requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * Any uploads via the resumable upload API must transfer a number of bytes\r\n * that is a multiple of this number.\r\n */\n\n\nvar resumableUploadChunkSize = 256 * 1024;\n/**\r\n * @param url From a call to fbs.requests.createResumableUpload.\r\n * @param chunkSize Number of bytes to upload.\r\n * @param status The previous status.\r\n *     If not passed or null, we start from the beginning.\r\n * @throws fbs.Error If the upload is already complete, the passed in status\r\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\r\n *     for upload.\r\n */\n\nfunction continueResumableUpload(location, service, url, blob, chunkSize, mappings, status, progressCallback) {\n  // TODO(andysoto): standardize on internal asserts\n  // assert(!(opt_status && opt_status.finalized));\n  var status_ = new ResumableUploadStatus(0, 0);\n\n  if (status) {\n    status_.current = status.current;\n    status_.total = status.total;\n  } else {\n    status_.current = 0;\n    status_.total = blob.size();\n  }\n\n  if (blob.size() !== status_.total) {\n    throw serverFileWrongSize();\n  }\n\n  var bytesLeft = status_.total - status_.current;\n  var bytesToUpload = bytesLeft;\n\n  if (chunkSize > 0) {\n    bytesToUpload = Math.min(bytesToUpload, chunkSize);\n  }\n\n  var startByte = status_.current;\n  var endByte = startByte + bytesToUpload;\n  var uploadCommand = bytesToUpload === bytesLeft ? 'upload, finalize' : 'upload';\n  var headers = {\n    'X-Goog-Upload-Command': uploadCommand,\n    'X-Goog-Upload-Offset': status_.current\n  };\n  var body = blob.slice(startByte, endByte);\n\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n\n  function handler(xhr, text) {\n    // TODO(andysoto): Verify the MD5 of each uploaded range:\n    // the 'x-range-md5' header comes back with status code 308 responses.\n    // We'll only be able to bail out though, because you can't re-upload a\n    // range that you previously uploaded.\n    var uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n    var newCurrent = status_.current + bytesToUpload;\n    var size = blob.size();\n    var metadata;\n\n    if (uploadStatus === 'final') {\n      metadata = metadataHandler(service, mappings)(xhr, text);\n    } else {\n      metadata = null;\n    }\n\n    return new ResumableUploadStatus(newCurrent, size, uploadStatus === 'final', metadata);\n  }\n\n  var method = 'POST';\n  var timeout = service.maxUploadRetryTime;\n  var requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.progressCallback = progressCallback || null;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar Observer =\n/** @class */\nfunction () {\n  function Observer(nextOrObserver, error, complete) {\n    var asFunctions = isFunction(nextOrObserver) || error != null || complete != null;\n\n    if (asFunctions) {\n      this.next = nextOrObserver;\n      this.error = error;\n      this.complete = complete;\n    } else {\n      var observer = nextOrObserver;\n      this.next = observer.next;\n      this.error = observer.error;\n      this.complete = observer.complete;\n    }\n  }\n\n  return Observer;\n}();\n\nvar UploadTaskSnapshot =\n/** @class */\nfunction () {\n  function UploadTaskSnapshot(bytesTransferred, totalBytes, state, metadata, task, ref) {\n    this.bytesTransferred = bytesTransferred;\n    this.totalBytes = totalBytes;\n    this.state = state;\n    this.metadata = metadata;\n    this.task = task;\n    this.ref = ref;\n  }\n\n  return UploadTaskSnapshot;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns a function that invokes f with its arguments asynchronously as a\r\n * microtask, i.e. as soon as possible after the current script returns back\r\n * into browser code.\r\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\n\n\nfunction async(f) {\n  return function () {\n    var argsToForward = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      argsToForward[_i] = arguments[_i];\n    } // eslint-disable-next-line @typescript-eslint/no-floating-promises\n\n\n    Promise.resolve().then(function () {\n      return f.apply(void 0, argsToForward);\n    });\n  };\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\r\n * upload and manage callbacks for various events.\r\n */\n\n\nvar UploadTask =\n/** @class */\nfunction () {\n  /**\r\n   * @param ref - The firebaseStorage.Reference object this task came\r\n   *     from, untyped to avoid cyclic dependencies.\r\n   * @param blob - The blob to upload.\r\n   */\n  function UploadTask(ref, blob, metadata) {\n    var _this = this;\n\n    if (metadata === void 0) {\n      metadata = null;\n    }\n    /**\r\n     * @internal\r\n     */\n\n\n    this._transferred = 0;\n    this._needToFetchStatus = false;\n    this._needToFetchMetadata = false;\n    this._observers = [];\n    this._error = undefined;\n    this._uploadUrl = undefined;\n    this._request = undefined;\n    this._chunkMultiplier = 1;\n    this._resolve = undefined;\n    this._reject = undefined;\n    this._ref = ref;\n    this._blob = blob;\n    this._metadata = metadata;\n    this._mappings = getMappings();\n    this._resumable = this._shouldDoResumable(this._blob);\n    this._state = InternalTaskState.RUNNING;\n\n    this._errorHandler = function (error) {\n      _this._request = undefined;\n      _this._chunkMultiplier = 1;\n\n      if (error.codeEquals(Code.CANCELED)) {\n        _this._needToFetchStatus = true;\n\n        _this.completeTransitions_();\n      } else {\n        _this._error = error;\n\n        _this._transition(InternalTaskState.ERROR);\n      }\n    };\n\n    this._metadataErrorHandler = function (error) {\n      _this._request = undefined;\n\n      if (error.codeEquals(Code.CANCELED)) {\n        _this.completeTransitions_();\n      } else {\n        _this._error = error;\n\n        _this._transition(InternalTaskState.ERROR);\n      }\n    };\n\n    this._promise = new Promise(function (resolve, reject) {\n      _this._resolve = resolve;\n      _this._reject = reject;\n\n      _this._start();\n    }); // Prevent uncaught rejections on the internal promise from bubbling out\n    // to the top level with a dummy handler.\n\n    this._promise.then(null, function () {});\n  }\n\n  UploadTask.prototype._makeProgressCallback = function () {\n    var _this = this;\n\n    var sizeBefore = this._transferred;\n    return function (loaded) {\n      return _this._updateProgress(sizeBefore + loaded);\n    };\n  };\n\n  UploadTask.prototype._shouldDoResumable = function (blob) {\n    return blob.size() > 256 * 1024;\n  };\n\n  UploadTask.prototype._start = function () {\n    if (this._state !== InternalTaskState.RUNNING) {\n      // This can happen if someone pauses us in a resume callback, for example.\n      return;\n    }\n\n    if (this._request !== undefined) {\n      return;\n    }\n\n    if (this._resumable) {\n      if (this._uploadUrl === undefined) {\n        this._createResumable();\n      } else {\n        if (this._needToFetchStatus) {\n          this._fetchStatus();\n        } else {\n          if (this._needToFetchMetadata) {\n            // Happens if we miss the metadata on upload completion.\n            this._fetchMetadata();\n          } else {\n            this._continueUpload();\n          }\n        }\n      }\n    } else {\n      this._oneShotUpload();\n    }\n  };\n\n  UploadTask.prototype._resolveToken = function (callback) {\n    var _this = this; // eslint-disable-next-line @typescript-eslint/no-floating-promises\n\n\n    this._ref.storage.getAuthToken().then(function (authToken) {\n      switch (_this._state) {\n        case InternalTaskState.RUNNING:\n          callback(authToken);\n          break;\n\n        case InternalTaskState.CANCELING:\n          _this._transition(InternalTaskState.CANCELED);\n\n          break;\n\n        case InternalTaskState.PAUSING:\n          _this._transition(InternalTaskState.PAUSED);\n\n          break;\n      }\n    });\n  }; // TODO(andysoto): assert false\n\n\n  UploadTask.prototype._createResumable = function () {\n    var _this = this;\n\n    this._resolveToken(function (authToken) {\n      var requestInfo = createResumableUpload(_this._ref.storage, _this._ref._location, _this._mappings, _this._blob, _this._metadata);\n\n      var createRequest = _this._ref.storage.makeRequest(requestInfo, authToken);\n\n      _this._request = createRequest;\n      createRequest.getPromise().then(function (url) {\n        _this._request = undefined;\n        _this._uploadUrl = url;\n        _this._needToFetchStatus = false;\n\n        _this.completeTransitions_();\n      }, _this._errorHandler);\n    });\n  };\n\n  UploadTask.prototype._fetchStatus = function () {\n    var _this = this; // TODO(andysoto): assert(this.uploadUrl_ !== null);\n\n\n    var url = this._uploadUrl;\n\n    this._resolveToken(function (authToken) {\n      var requestInfo = getResumableUploadStatus(_this._ref.storage, _this._ref._location, url, _this._blob);\n\n      var statusRequest = _this._ref.storage.makeRequest(requestInfo, authToken);\n\n      _this._request = statusRequest;\n      statusRequest.getPromise().then(function (status) {\n        status = status;\n        _this._request = undefined;\n\n        _this._updateProgress(status.current);\n\n        _this._needToFetchStatus = false;\n\n        if (status.finalized) {\n          _this._needToFetchMetadata = true;\n        }\n\n        _this.completeTransitions_();\n      }, _this._errorHandler);\n    });\n  };\n\n  UploadTask.prototype._continueUpload = function () {\n    var _this = this;\n\n    var chunkSize = resumableUploadChunkSize * this._chunkMultiplier;\n    var status = new ResumableUploadStatus(this._transferred, this._blob.size()); // TODO(andysoto): assert(this.uploadUrl_ !== null);\n\n    var url = this._uploadUrl;\n\n    this._resolveToken(function (authToken) {\n      var requestInfo;\n\n      try {\n        requestInfo = continueResumableUpload(_this._ref._location, _this._ref.storage, url, _this._blob, chunkSize, _this._mappings, status, _this._makeProgressCallback());\n      } catch (e) {\n        _this._error = e;\n\n        _this._transition(InternalTaskState.ERROR);\n\n        return;\n      }\n\n      var uploadRequest = _this._ref.storage.makeRequest(requestInfo, authToken);\n\n      _this._request = uploadRequest;\n      uploadRequest.getPromise().then(function (newStatus) {\n        _this._increaseMultiplier();\n\n        _this._request = undefined;\n\n        _this._updateProgress(newStatus.current);\n\n        if (newStatus.finalized) {\n          _this._metadata = newStatus.metadata;\n\n          _this._transition(InternalTaskState.SUCCESS);\n        } else {\n          _this.completeTransitions_();\n        }\n      }, _this._errorHandler);\n    });\n  };\n\n  UploadTask.prototype._increaseMultiplier = function () {\n    var currentSize = resumableUploadChunkSize * this._chunkMultiplier; // Max chunk size is 32M.\n\n    if (currentSize < 32 * 1024 * 1024) {\n      this._chunkMultiplier *= 2;\n    }\n  };\n\n  UploadTask.prototype._fetchMetadata = function () {\n    var _this = this;\n\n    this._resolveToken(function (authToken) {\n      var requestInfo = getMetadata(_this._ref.storage, _this._ref._location, _this._mappings);\n\n      var metadataRequest = _this._ref.storage.makeRequest(requestInfo, authToken);\n\n      _this._request = metadataRequest;\n      metadataRequest.getPromise().then(function (metadata) {\n        _this._request = undefined;\n        _this._metadata = metadata;\n\n        _this._transition(InternalTaskState.SUCCESS);\n      }, _this._metadataErrorHandler);\n    });\n  };\n\n  UploadTask.prototype._oneShotUpload = function () {\n    var _this = this;\n\n    this._resolveToken(function (authToken) {\n      var requestInfo = multipartUpload(_this._ref.storage, _this._ref._location, _this._mappings, _this._blob, _this._metadata);\n\n      var multipartRequest = _this._ref.storage.makeRequest(requestInfo, authToken);\n\n      _this._request = multipartRequest;\n      multipartRequest.getPromise().then(function (metadata) {\n        _this._request = undefined;\n        _this._metadata = metadata;\n\n        _this._updateProgress(_this._blob.size());\n\n        _this._transition(InternalTaskState.SUCCESS);\n      }, _this._errorHandler);\n    });\n  };\n\n  UploadTask.prototype._updateProgress = function (transferred) {\n    var old = this._transferred;\n    this._transferred = transferred; // A progress update can make the \"transferred\" value smaller (e.g. a\n    // partial upload not completed by server, after which the \"transferred\"\n    // value may reset to the value at the beginning of the request).\n\n    if (this._transferred !== old) {\n      this._notifyObservers();\n    }\n  };\n\n  UploadTask.prototype._transition = function (state) {\n    if (this._state === state) {\n      return;\n    }\n\n    switch (state) {\n      case InternalTaskState.CANCELING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n\n        break;\n\n      case InternalTaskState.PAUSING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING);\n        this._state = state;\n\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n\n        break;\n\n      case InternalTaskState.RUNNING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        var wasPaused = this._state === InternalTaskState.PAUSED;\n        this._state = state;\n\n        if (wasPaused) {\n          this._notifyObservers();\n\n          this._start();\n        }\n\n        break;\n\n      case InternalTaskState.PAUSED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n\n        this._notifyObservers();\n\n        break;\n\n      case InternalTaskState.CANCELED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._error = canceled();\n        this._state = state;\n\n        this._notifyObservers();\n\n        break;\n\n      case InternalTaskState.ERROR:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n\n        this._notifyObservers();\n\n        break;\n\n      case InternalTaskState.SUCCESS:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n\n        this._notifyObservers();\n\n        break;\n    }\n  };\n\n  UploadTask.prototype.completeTransitions_ = function () {\n    switch (this._state) {\n      case InternalTaskState.PAUSING:\n        this._transition(InternalTaskState.PAUSED);\n\n        break;\n\n      case InternalTaskState.CANCELING:\n        this._transition(InternalTaskState.CANCELED);\n\n        break;\n\n      case InternalTaskState.RUNNING:\n        this._start();\n\n        break;\n    }\n  };\n\n  Object.defineProperty(UploadTask.prototype, \"snapshot\", {\n    get: function () {\n      var externalState = taskStateFromInternalTaskState(this._state);\n      return new UploadTaskSnapshot(this._transferred, this._blob.size(), externalState, this._metadata, this, this._ref);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Adds a callback for an event.\r\n   * @param type - The type of event to listen for.\r\n   */\n\n  UploadTask.prototype.on = function (type, nextOrObserver, error, completed) {\n    var _this = this;\n\n    var observer = new Observer(nextOrObserver, error, completed);\n\n    this._addObserver(observer);\n\n    return function () {\n      _this._removeObserver(observer);\n    };\n  };\n  /**\r\n   * This object behaves like a Promise, and resolves with its snapshot data\r\n   * when the upload completes.\r\n   * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\r\n   * @param onRejected - The rejection callback.\r\n   */\n\n\n  UploadTask.prototype.then = function (onFulfilled, onRejected) {\n    // These casts are needed so that TypeScript can infer the types of the\n    // resulting Promise.\n    return this._promise.then(onFulfilled, onRejected);\n  };\n  /**\r\n   * Equivalent to calling `then(null, onRejected)`.\r\n   */\n\n\n  UploadTask.prototype.catch = function (onRejected) {\n    return this.then(null, onRejected);\n  };\n  /**\r\n   * Adds the given observer.\r\n   */\n\n\n  UploadTask.prototype._addObserver = function (observer) {\n    this._observers.push(observer);\n\n    this._notifyObserver(observer);\n  };\n  /**\r\n   * Removes the given observer.\r\n   */\n\n\n  UploadTask.prototype._removeObserver = function (observer) {\n    var i = this._observers.indexOf(observer);\n\n    if (i !== -1) {\n      this._observers.splice(i, 1);\n    }\n  };\n\n  UploadTask.prototype._notifyObservers = function () {\n    var _this = this;\n\n    this._finishPromise();\n\n    var observers = this._observers.slice();\n\n    observers.forEach(function (observer) {\n      _this._notifyObserver(observer);\n    });\n  };\n\n  UploadTask.prototype._finishPromise = function () {\n    if (this._resolve !== undefined) {\n      var triggered = true;\n\n      switch (taskStateFromInternalTaskState(this._state)) {\n        case TaskState.SUCCESS:\n          async(this._resolve.bind(null, this.snapshot))();\n          break;\n\n        case TaskState.CANCELED:\n        case TaskState.ERROR:\n          var toCall = this._reject;\n          async(toCall.bind(null, this._error))();\n          break;\n\n        default:\n          triggered = false;\n          break;\n      }\n\n      if (triggered) {\n        this._resolve = undefined;\n        this._reject = undefined;\n      }\n    }\n  };\n\n  UploadTask.prototype._notifyObserver = function (observer) {\n    var externalState = taskStateFromInternalTaskState(this._state);\n\n    switch (externalState) {\n      case TaskState.RUNNING:\n      case TaskState.PAUSED:\n        if (observer.next) {\n          async(observer.next.bind(observer, this.snapshot))();\n        }\n\n        break;\n\n      case TaskState.SUCCESS:\n        if (observer.complete) {\n          async(observer.complete.bind(observer))();\n        }\n\n        break;\n\n      case TaskState.CANCELED:\n      case TaskState.ERROR:\n        if (observer.error) {\n          async(observer.error.bind(observer, this._error))();\n        }\n\n        break;\n\n      default:\n        // TODO(andysoto): assert(false);\n        if (observer.error) {\n          async(observer.error.bind(observer, this._error))();\n        }\n\n    }\n  };\n  /**\r\n   * Resumes a paused task. Has no effect on a currently running or failed task.\r\n   * @returns True if the operation took effect, false if ignored.\r\n   */\n\n\n  UploadTask.prototype.resume = function () {\n    var valid = this._state === InternalTaskState.PAUSED || this._state === InternalTaskState.PAUSING;\n\n    if (valid) {\n      this._transition(InternalTaskState.RUNNING);\n    }\n\n    return valid;\n  };\n  /**\r\n   * Pauses a currently running task. Has no effect on a paused or failed task.\r\n   * @returns True if the operation took effect, false if ignored.\r\n   */\n\n\n  UploadTask.prototype.pause = function () {\n    var valid = this._state === InternalTaskState.RUNNING;\n\n    if (valid) {\n      this._transition(InternalTaskState.PAUSING);\n    }\n\n    return valid;\n  };\n  /**\r\n   * Cancels a currently running or paused task. Has no effect on a complete or\r\n   * failed task.\r\n   * @returns True if the operation took effect, false if ignored.\r\n   */\n\n\n  UploadTask.prototype.cancel = function () {\n    var valid = this._state === InternalTaskState.RUNNING || this._state === InternalTaskState.PAUSING;\n\n    if (valid) {\n      this._transition(InternalTaskState.CANCELING);\n    }\n\n    return valid;\n  };\n\n  return UploadTask;\n}();\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Provides methods to interact with a bucket in the Firebase Storage service.\r\n * @param location - An fbs.location, or the URL at\r\n *     which to base this object, in one of the following forms:\r\n *         gs://<bucket>/<object-path>\r\n *         http[s]://firebasestorage.googleapis.com/\r\n *                     <api-version>/b/<bucket>/o/<object-path>\r\n *     Any query or fragment strings will be ignored in the http[s]\r\n *     format. If no value is passed, the storage object will use a URL based on\r\n *     the project ID of the base firebase.App instance.\r\n */\n\n\nvar Reference =\n/** @class */\nfunction () {\n  function Reference(_service, location) {\n    this._service = _service;\n\n    if (location instanceof Location) {\n      this._location = location;\n    } else {\n      this._location = Location.makeFromUrl(location);\n    }\n  }\n  /**\r\n   * @returns The URL for the bucket and path this object references,\r\n   *     in the form gs://<bucket>/<object-path>\r\n   * @override\r\n   */\n\n\n  Reference.prototype.toString = function () {\n    return 'gs://' + this._location.bucket + '/' + this._location.path;\n  };\n\n  Reference.prototype.newRef = function (service, location) {\n    return new Reference(service, location);\n  };\n\n  Object.defineProperty(Reference.prototype, \"root\", {\n    /**\r\n     * @returns An reference to the root of this\r\n     *     object's bucket.\r\n     */\n    get: function () {\n      var location = new Location(this._location.bucket, '');\n      return this.newRef(this._service, location);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"bucket\", {\n    get: function () {\n      return this._location.bucket;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"fullPath\", {\n    get: function () {\n      return this._location.path;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"name\", {\n    get: function () {\n      return lastComponent(this._location.path);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"storage\", {\n    get: function () {\n      return this._service;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Reference.prototype, \"parent\", {\n    get: function () {\n      var newPath = parent(this._location.path);\n\n      if (newPath === null) {\n        return null;\n      }\n\n      var location = new Location(this._location.bucket, newPath);\n      return new Reference(this._service, location);\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  Reference.prototype._throwIfRoot = function (name) {\n    if (this._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  };\n\n  return Reference;\n}();\n/**\r\n * Uploads a blob to this object's location.\r\n * @public\r\n * @param ref - Storage Reference where data should be uploaded.\r\n * @param data - The data to upload.\r\n * @param metadata - Metadata for the newly uploaded string.\r\n * @returns An UploadTask that lets you control and\r\n *     observe the upload.\r\n */\n\n\nfunction uploadBytesResumable(ref, data, metadata) {\n  if (metadata === void 0) {\n    metadata = null;\n  }\n\n  ref._throwIfRoot('uploadBytesResumable');\n\n  return new UploadTask(ref, new FbsBlob(data), metadata);\n}\n/**\r\n * Uploads a string to this object's location.\r\n * @public\r\n * @param ref - Storage Reference where string should be uploaded.\r\n * @param value - The string to upload.\r\n * @param format - The format of the string to upload.\r\n * @param metadata - Metadata for the newly uploaded object.\r\n * @returns An UploadTask that lets you control and\r\n *     observe the upload.\r\n */\n\n\nfunction uploadString(ref, value, format, metadata) {\n  if (format === void 0) {\n    format = StringFormat.RAW;\n  }\n\n  ref._throwIfRoot('putString');\n\n  var data = dataFromString(format, value);\n\n  var metadataClone = __assign({}, metadata);\n\n  if (metadataClone['contentType'] == null && data.contentType != null) {\n    metadataClone['contentType'] = data.contentType;\n  }\n\n  return new UploadTask(ref, new FbsBlob(data.data, true), metadataClone);\n}\n/**\r\n * List all items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * This is a helper method for calling list() repeatedly until there are\r\n * no more results. The default pagination size is 1000.\r\n *\r\n * Note: The results may not be consistent if objects are changed while this\r\n * operation is running.\r\n *\r\n * Warning: listAll may potentially consume too many resources if there are\r\n * too many results.\r\n * @public\r\n * @param ref - Storage Reference to get list from.\r\n *\r\n * @returns A Promise that resolves with all the items and prefixes under\r\n *      the current storage reference. `prefixes` contains references to\r\n *      sub-directories and `items` contains references to objects in this\r\n *      folder. `nextPageToken` is never returned.\r\n */\n\n\nfunction listAll(ref) {\n  var accumulator = {\n    prefixes: [],\n    items: []\n  };\n  return listAllHelper(ref, accumulator).then(function () {\n    return accumulator;\n  });\n}\n/**\r\n * Separated from listAll because async functions can't use \"arguments\".\r\n * @internal\r\n * @param ref\r\n * @param accumulator\r\n * @param pageToken\r\n */\n\n\nfunction listAllHelper(ref, accumulator, pageToken) {\n  return __awaiter(this, void 0, void 0, function () {\n    var opt, nextPage;\n\n    var _a, _b;\n\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          opt = {\n            // maxResults is 1000 by default.\n            pageToken: pageToken\n          };\n          return [4\n          /*yield*/\n          , list$1(ref, opt)];\n\n        case 1:\n          nextPage = _c.sent();\n\n          (_a = accumulator.prefixes).push.apply(_a, nextPage.prefixes);\n\n          (_b = accumulator.items).push.apply(_b, nextPage.items);\n\n          if (!(nextPage.nextPageToken != null)) return [3\n          /*break*/\n          , 3];\n          return [4\n          /*yield*/\n          , listAllHelper(ref, accumulator, nextPage.nextPageToken)];\n\n        case 2:\n          _c.sent();\n\n          _c.label = 3;\n\n        case 3:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n/**\r\n * List items (files) and prefixes (folders) under this storage reference.\r\n *\r\n * List API is only available for Firebase Rules Version 2.\r\n *\r\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n * delimited folder structure.\r\n * Refer to GCS's List API if you want to learn more.\r\n *\r\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n * support objects whose paths end with \"/\" or contain two consecutive\r\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n * list() may fail if there are too many unsupported objects in the bucket.\r\n * @public\r\n *\r\n * @param ref - Storage Reference to get list from.\r\n * @param options - See ListOptions for details.\r\n * @returns A Promise that resolves with the items and prefixes.\r\n *      `prefixes` contains references to sub-folders and `items`\r\n *      contains references to objects in this folder. `nextPageToken`\r\n *      can be used to get the rest of the results.\r\n */\n\n\nfunction list$1(ref, options) {\n  return __awaiter(this, void 0, void 0, function () {\n    var authToken, op, requestInfo;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (options != null) {\n            if (typeof options.maxResults === 'number') {\n              validateNumber('options.maxResults',\n              /* minValue= */\n              1,\n              /* maxValue= */\n              1000, options.maxResults);\n            }\n          }\n\n          return [4\n          /*yield*/\n          , ref.storage.getAuthToken()];\n\n        case 1:\n          authToken = _a.sent();\n          op = options || {};\n          requestInfo = list(ref.storage, ref._location,\n          /*delimiter= */\n          '/', op.pageToken, op.maxResults);\n          return [2\n          /*return*/\n          , ref.storage.makeRequest(requestInfo, authToken).getPromise()];\n      }\n    });\n  });\n}\n/**\r\n * A promise that resolves with the metadata for this object. If this\r\n * object doesn't exist or metadata cannot be retreived, the promise is\r\n * rejected.\r\n * @public\r\n * @param ref - Storage Reference to get metadata from.\r\n */\n\n\nfunction getMetadata$1(ref) {\n  return __awaiter(this, void 0, void 0, function () {\n    var authToken, requestInfo;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          ref._throwIfRoot('getMetadata');\n\n          return [4\n          /*yield*/\n          , ref.storage.getAuthToken()];\n\n        case 1:\n          authToken = _a.sent();\n          requestInfo = getMetadata(ref.storage, ref._location, getMappings());\n          return [2\n          /*return*/\n          , ref.storage.makeRequest(requestInfo, authToken).getPromise()];\n      }\n    });\n  });\n}\n/**\r\n * Updates the metadata for this object.\r\n * @public\r\n * @param ref - Storage Reference to update metadata for.\r\n * @param metadata - The new metadata for the object.\r\n *     Only values that have been explicitly set will be changed. Explicitly\r\n *     setting a value to null will remove the metadata.\r\n * @returns A promise that resolves\r\n *     with the new metadata for this object.\r\n *     See `firebaseStorage.Reference.prototype.getMetadata`\r\n */\n\n\nfunction updateMetadata$1(ref, metadata) {\n  return __awaiter(this, void 0, void 0, function () {\n    var authToken, requestInfo;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          ref._throwIfRoot('updateMetadata');\n\n          return [4\n          /*yield*/\n          , ref.storage.getAuthToken()];\n\n        case 1:\n          authToken = _a.sent();\n          requestInfo = updateMetadata(ref.storage, ref._location, metadata, getMappings());\n          return [2\n          /*return*/\n          , ref.storage.makeRequest(requestInfo, authToken).getPromise()];\n      }\n    });\n  });\n}\n/**\r\n * Returns the download URL for the given Reference.\r\n * @public\r\n * @returns A promise that resolves with the download\r\n *     URL for this object.\r\n */\n\n\nfunction getDownloadURL(ref) {\n  return __awaiter(this, void 0, void 0, function () {\n    var authToken, requestInfo;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          ref._throwIfRoot('getDownloadURL');\n\n          return [4\n          /*yield*/\n          , ref.storage.getAuthToken()];\n\n        case 1:\n          authToken = _a.sent();\n          requestInfo = getDownloadUrl(ref.storage, ref._location, getMappings());\n          return [2\n          /*return*/\n          , ref.storage.makeRequest(requestInfo, authToken).getPromise().then(function (url) {\n            if (url === null) {\n              throw noDownloadURL();\n            }\n\n            return url;\n          })];\n      }\n    });\n  });\n}\n/**\r\n * Deletes the object at this location.\r\n * @public\r\n * @param ref - Storage Reference for object to delete.\r\n * @returns A promise that resolves if the deletion succeeds.\r\n */\n\n\nfunction deleteObject$1(ref) {\n  return __awaiter(this, void 0, void 0, function () {\n    var authToken, requestInfo;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          ref._throwIfRoot('deleteObject');\n\n          return [4\n          /*yield*/\n          , ref.storage.getAuthToken()];\n\n        case 1:\n          authToken = _a.sent();\n          requestInfo = deleteObject(ref.storage, ref._location);\n          return [2\n          /*return*/\n          , ref.storage.makeRequest(requestInfo, authToken).getPromise()];\n      }\n    });\n  });\n}\n/**\r\n * Returns reference for object obtained by appending `childPath` to `ref`.\r\n * @internal\r\n *\r\n * @param ref - Storage Reference to get child of.\r\n * @param childPath - Child path from provided ref.\r\n * @returns A reference to the object obtained by\r\n * appending childPath, removing any duplicate, beginning, or trailing\r\n * slashes.\r\n */\n\n\nfunction getChild(ref, childPath) {\n  var newPath = child(ref._location.path, childPath);\n  var location = new Location(ref._location.bucket, newPath);\n  return new Reference(ref.storage, location);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar UploadTaskSnapshotCompat =\n/** @class */\nfunction () {\n  function UploadTaskSnapshotCompat(_delegate, task, ref) {\n    this._delegate = _delegate;\n    this.task = task;\n    this.ref = ref;\n  }\n\n  Object.defineProperty(UploadTaskSnapshotCompat.prototype, \"bytesTransferred\", {\n    get: function () {\n      return this._delegate.bytesTransferred;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(UploadTaskSnapshotCompat.prototype, \"metadata\", {\n    get: function () {\n      return this._delegate.metadata;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(UploadTaskSnapshotCompat.prototype, \"state\", {\n    get: function () {\n      return this._delegate.state;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(UploadTaskSnapshotCompat.prototype, \"totalBytes\", {\n    get: function () {\n      return this._delegate.totalBytes;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return UploadTaskSnapshotCompat;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar UploadTaskCompat =\n/** @class */\nfunction () {\n  function UploadTaskCompat(_delegate, _ref) {\n    this._delegate = _delegate;\n    this._ref = _ref;\n    this.cancel = this._delegate.cancel.bind(this._delegate);\n    this.catch = this._delegate.catch.bind(this._delegate);\n    this.pause = this._delegate.pause.bind(this._delegate);\n    this.resume = this._delegate.resume.bind(this._delegate);\n    this._snapshot = new UploadTaskSnapshotCompat(this._delegate.snapshot, this, this._ref);\n  }\n\n  Object.defineProperty(UploadTaskCompat.prototype, \"snapshot\", {\n    get: function () {\n      return this._snapshot;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  UploadTaskCompat.prototype.then = function (onFulfilled, onRejected) {\n    var _this = this;\n\n    return this._delegate.then(function (snapshot) {\n      if (onFulfilled) {\n        return onFulfilled(new UploadTaskSnapshotCompat(snapshot, _this, _this._ref));\n      }\n    }, onRejected);\n  };\n\n  UploadTaskCompat.prototype.on = function (type, nextOrObserver, error, completed) {\n    var _this = this;\n\n    var wrappedNextOrObserver = undefined;\n\n    if (!!nextOrObserver) {\n      if (typeof nextOrObserver === 'function') {\n        wrappedNextOrObserver = function (taskSnapshot) {\n          return nextOrObserver(new UploadTaskSnapshotCompat(taskSnapshot, _this, _this._ref));\n        };\n      } else {\n        wrappedNextOrObserver = {\n          next: !!nextOrObserver.next ? function (taskSnapshot) {\n            return nextOrObserver.next(new UploadTaskSnapshotCompat(taskSnapshot, _this, _this._ref));\n          } : undefined,\n          complete: nextOrObserver.complete || undefined,\n          error: nextOrObserver.error || undefined\n        };\n      }\n    }\n\n    return this._delegate.on(type, wrappedNextOrObserver, error || undefined, completed || undefined);\n  };\n\n  return UploadTaskCompat;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar ListResultCompat =\n/** @class */\nfunction () {\n  function ListResultCompat(_delegate, _service) {\n    this._delegate = _delegate;\n    this._service = _service;\n  }\n\n  Object.defineProperty(ListResultCompat.prototype, \"prefixes\", {\n    get: function () {\n      var _this = this;\n\n      return this._delegate.prefixes.map(function (ref) {\n        return new ReferenceCompat(ref, _this._service);\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ListResultCompat.prototype, \"items\", {\n    get: function () {\n      var _this = this;\n\n      return this._delegate.items.map(function (ref) {\n        return new ReferenceCompat(ref, _this._service);\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ListResultCompat.prototype, \"nextPageToken\", {\n    get: function () {\n      return this._delegate.nextPageToken || null;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return ListResultCompat;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *  http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar ReferenceCompat =\n/** @class */\nfunction () {\n  function ReferenceCompat(_delegate, storage) {\n    this._delegate = _delegate;\n    this.storage = storage;\n  }\n\n  Object.defineProperty(ReferenceCompat.prototype, \"name\", {\n    get: function () {\n      return this._delegate.name;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReferenceCompat.prototype, \"bucket\", {\n    get: function () {\n      return this._delegate.bucket;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReferenceCompat.prototype, \"fullPath\", {\n    get: function () {\n      return this._delegate.fullPath;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  ReferenceCompat.prototype.toString = function () {\n    return this._delegate.toString();\n  };\n  /**\r\n   * @returns A reference to the object obtained by\r\n   * appending childPath, removing any duplicate, beginning, or trailing\r\n   * slashes.\r\n   */\n\n\n  ReferenceCompat.prototype.child = function (childPath) {\n    var reference = getChild(this._delegate, childPath);\n    return new ReferenceCompat(reference, this.storage);\n  };\n\n  Object.defineProperty(ReferenceCompat.prototype, \"root\", {\n    get: function () {\n      return new ReferenceCompat(this._delegate.root, this.storage);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ReferenceCompat.prototype, \"parent\", {\n    /**\r\n     * @returns A reference to the parent of the\r\n     * current object, or null if the current object is the root.\r\n     */\n    get: function () {\n      var reference = this._delegate.parent;\n\n      if (reference == null) {\n        return null;\n      }\n\n      return new ReferenceCompat(reference, this.storage);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Uploads a blob to this object's location.\r\n   * @param data - The blob to upload.\r\n   * @returns An UploadTask that lets you control and\r\n   * observe the upload.\r\n   */\n\n  ReferenceCompat.prototype.put = function (data, metadata) {\n    this._throwIfRoot('put');\n\n    return new UploadTaskCompat(uploadBytesResumable(this._delegate, data, metadata), this);\n  };\n  /**\r\n   * Uploads a string to this object's location.\r\n   * @param value - The string to upload.\r\n   * @param format - The format of the string to upload.\r\n   * @returns An UploadTask that lets you control and\r\n   * observe the upload.\r\n   */\n\n\n  ReferenceCompat.prototype.putString = function (value, format, metadata) {\n    if (format === void 0) {\n      format = StringFormat.RAW;\n    }\n\n    this._throwIfRoot('putString');\n\n    return new UploadTaskCompat(uploadString(this._delegate, value, format, metadata), this);\n  };\n  /**\r\n   * List all items (files) and prefixes (folders) under this storage reference.\r\n   *\r\n   * This is a helper method for calling list() repeatedly until there are\r\n   * no more results. The default pagination size is 1000.\r\n   *\r\n   * Note: The results may not be consistent if objects are changed while this\r\n   * operation is running.\r\n   *\r\n   * Warning: listAll may potentially consume too many resources if there are\r\n   * too many results.\r\n   *\r\n   * @returns A Promise that resolves with all the items and prefixes under\r\n   *  the current storage reference. `prefixes` contains references to\r\n   *  sub-directories and `items` contains references to objects in this\r\n   *  folder. `nextPageToken` is never returned.\r\n   */\n\n\n  ReferenceCompat.prototype.listAll = function () {\n    var _this = this;\n\n    return listAll(this._delegate).then(function (r) {\n      return new ListResultCompat(r, _this.storage);\n    });\n  };\n  /**\r\n   * List items (files) and prefixes (folders) under this storage reference.\r\n   *\r\n   * List API is only available for Firebase Rules Version 2.\r\n   *\r\n   * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n   * delimited folder structure. Refer to GCS's List API if you want to learn more.\r\n   *\r\n   * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n   * support objects whose paths end with \"/\" or contain two consecutive\r\n   * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n   * list() may fail if there are too many unsupported objects in the bucket.\r\n   *\r\n   * @param options - See ListOptions for details.\r\n   * @returns A Promise that resolves with the items and prefixes.\r\n   * `prefixes` contains references to sub-folders and `items`\r\n   * contains references to objects in this folder. `nextPageToken`\r\n   * can be used to get the rest of the results.\r\n   */\n\n\n  ReferenceCompat.prototype.list = function (options) {\n    var _this = this;\n\n    return list$1(this._delegate, options).then(function (r) {\n      return new ListResultCompat(r, _this.storage);\n    });\n  };\n  /**\r\n   * A promise that resolves with the metadata for this object. If this\r\n   * object doesn't exist or metadata cannot be retreived, the promise is\r\n   * rejected.\r\n   */\n\n\n  ReferenceCompat.prototype.getMetadata = function () {\n    return getMetadata$1(this._delegate);\n  };\n  /**\r\n   * Updates the metadata for this object.\r\n   * @param metadata - The new metadata for the object.\r\n   * Only values that have been explicitly set will be changed. Explicitly\r\n   * setting a value to null will remove the metadata.\r\n   * @returns A promise that resolves\r\n   * with the new metadata for this object.\r\n   * @see firebaseStorage.Reference.prototype.getMetadata\r\n   */\n\n\n  ReferenceCompat.prototype.updateMetadata = function (metadata) {\n    return updateMetadata$1(this._delegate, metadata);\n  };\n  /**\r\n   * @returns A promise that resolves with the download\r\n   * URL for this object.\r\n   */\n\n\n  ReferenceCompat.prototype.getDownloadURL = function () {\n    return getDownloadURL(this._delegate);\n  };\n  /**\r\n   * Deletes the object at this location.\r\n   * @returns A promise that resolves if the deletion succeeds.\r\n   */\n\n\n  ReferenceCompat.prototype.delete = function () {\n    this._throwIfRoot('delete');\n\n    return deleteObject$1(this._delegate);\n  };\n\n  ReferenceCompat.prototype._throwIfRoot = function (name) {\n    if (this._delegate._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  };\n\n  return ReferenceCompat;\n}();\n/**\r\n * A request whose promise always fails.\r\n */\n\n\nvar FailRequest =\n/** @class */\nfunction () {\n  function FailRequest(error) {\n    this.promise_ = Promise.reject(error);\n  }\n  /** @inheritDoc */\n\n\n  FailRequest.prototype.getPromise = function () {\n    return this.promise_;\n  };\n  /** @inheritDoc */\n\n\n  FailRequest.prototype.cancel = function (_appDelete) {};\n\n  return FailRequest;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * @param f May be invoked\r\n *     before the function returns.\r\n * @param callback Get all the arguments passed to the function\r\n *     passed to f, including the initial boolean.\r\n */\n\n\nfunction start(f, // eslint-disable-next-line @typescript-eslint/no-explicit-any\ncallback, timeout) {\n  // TODO(andysoto): make this code cleaner (probably refactor into an actual\n  // type instead of a bunch of functions with state shared in the closure)\n  var waitSeconds = 1; // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\n  // TODO: find a way to exclude Node type definition for storage because storage only works in browser\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  var timeoutId = null;\n  var hitTimeout = false;\n  var cancelState = 0;\n\n  function canceled() {\n    return cancelState === 2;\n  }\n\n  var triggeredCallback = false;\n\n  function triggerCallback() {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    if (!triggeredCallback) {\n      triggeredCallback = true;\n      callback.apply(null, args);\n    }\n  }\n\n  function callWithDelay(millis) {\n    timeoutId = setTimeout(function () {\n      timeoutId = null;\n      f(handler, canceled());\n    }, millis);\n  }\n\n  function handler(success) {\n    var args = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n\n    if (triggeredCallback) {\n      return;\n    }\n\n    if (success) {\n      triggerCallback.call.apply(triggerCallback, __spreadArrays([null, success], args));\n      return;\n    }\n\n    var mustStop = canceled() || hitTimeout;\n\n    if (mustStop) {\n      triggerCallback.call.apply(triggerCallback, __spreadArrays([null, success], args));\n      return;\n    }\n\n    if (waitSeconds < 64) {\n      /* TODO(andysoto): don't back off so quickly if we know we're offline. */\n      waitSeconds *= 2;\n    }\n\n    var waitMillis;\n\n    if (cancelState === 1) {\n      cancelState = 2;\n      waitMillis = 0;\n    } else {\n      waitMillis = (waitSeconds + Math.random()) * 1000;\n    }\n\n    callWithDelay(waitMillis);\n  }\n\n  var stopped = false;\n\n  function stop(wasTimeout) {\n    if (stopped) {\n      return;\n    }\n\n    stopped = true;\n\n    if (triggeredCallback) {\n      return;\n    }\n\n    if (timeoutId !== null) {\n      if (!wasTimeout) {\n        cancelState = 2;\n      }\n\n      clearTimeout(timeoutId);\n      callWithDelay(0);\n    } else {\n      if (!wasTimeout) {\n        cancelState = 1;\n      }\n    }\n  }\n\n  callWithDelay(0);\n  setTimeout(function () {\n    hitTimeout = true;\n    stop(true);\n  }, timeout);\n  return stop;\n}\n/**\r\n * Stops the retry loop from repeating.\r\n * If the function is currently \"in between\" retries, it is invoked immediately\r\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\r\n * after the current invocation finishes iff the current invocation would have\r\n * triggered another retry.\r\n */\n\n\nfunction stop(id) {\n  id(false);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar NetworkRequest =\n/** @class */\nfunction () {\n  function NetworkRequest(url, method, headers, body, successCodes, additionalRetryCodes, callback, errorCallback, timeout, progressCallback, pool) {\n    var _this = this;\n\n    this.pendingXhr_ = null;\n    this.backoffId_ = null;\n    this.canceled_ = false;\n    this.appDelete_ = false;\n    this.url_ = url;\n    this.method_ = method;\n    this.headers_ = headers;\n    this.body_ = body;\n    this.successCodes_ = successCodes.slice();\n    this.additionalRetryCodes_ = additionalRetryCodes.slice();\n    this.callback_ = callback;\n    this.errorCallback_ = errorCallback;\n    this.progressCallback_ = progressCallback;\n    this.timeout_ = timeout;\n    this.pool_ = pool;\n    this.promise_ = new Promise(function (resolve, reject) {\n      _this.resolve_ = resolve;\n      _this.reject_ = reject;\n\n      _this.start_();\n    });\n  }\n  /**\r\n   * Actually starts the retry loop.\r\n   */\n\n\n  NetworkRequest.prototype.start_ = function () {\n    var self = this;\n\n    function doTheRequest(backoffCallback, canceled) {\n      if (canceled) {\n        backoffCallback(false, new RequestEndStatus(false, null, true));\n        return;\n      }\n\n      var xhr = self.pool_.createXhrIo();\n      self.pendingXhr_ = xhr;\n\n      function progressListener(progressEvent) {\n        var loaded = progressEvent.loaded;\n        var total = progressEvent.lengthComputable ? progressEvent.total : -1;\n\n        if (self.progressCallback_ !== null) {\n          self.progressCallback_(loaded, total);\n        }\n      }\n\n      if (self.progressCallback_ !== null) {\n        xhr.addUploadProgressListener(progressListener);\n      } // eslint-disable-next-line @typescript-eslint/no-floating-promises\n\n\n      xhr.send(self.url_, self.method_, self.body_, self.headers_).then(function (xhr) {\n        if (self.progressCallback_ !== null) {\n          xhr.removeUploadProgressListener(progressListener);\n        }\n\n        self.pendingXhr_ = null;\n        xhr = xhr;\n        var hitServer = xhr.getErrorCode() === ErrorCode.NO_ERROR;\n        var status = xhr.getStatus();\n\n        if (!hitServer || self.isRetryStatusCode_(status)) {\n          var wasCanceled = xhr.getErrorCode() === ErrorCode.ABORT;\n          backoffCallback(false, new RequestEndStatus(false, null, wasCanceled));\n          return;\n        }\n\n        var successCode = self.successCodes_.indexOf(status) !== -1;\n        backoffCallback(true, new RequestEndStatus(successCode, xhr));\n      });\n    }\n    /**\r\n     * @param requestWentThrough - True if the request eventually went\r\n     *     through, false if it hit the retry limit or was canceled.\r\n     */\n\n\n    function backoffDone(requestWentThrough, status) {\n      var resolve = self.resolve_;\n      var reject = self.reject_;\n      var xhr = status.xhr;\n\n      if (status.wasSuccessCode) {\n        try {\n          var result = self.callback_(xhr, xhr.getResponseText());\n\n          if (isJustDef(result)) {\n            resolve(result);\n          } else {\n            resolve();\n          }\n        } catch (e) {\n          reject(e);\n        }\n      } else {\n        if (xhr !== null) {\n          var err = unknown();\n          err.serverResponse = xhr.getResponseText();\n\n          if (self.errorCallback_) {\n            reject(self.errorCallback_(xhr, err));\n          } else {\n            reject(err);\n          }\n        } else {\n          if (status.canceled) {\n            var err = self.appDelete_ ? appDeleted() : canceled();\n            reject(err);\n          } else {\n            var err = retryLimitExceeded();\n            reject(err);\n          }\n        }\n      }\n    }\n\n    if (this.canceled_) {\n      backoffDone(false, new RequestEndStatus(false, null, true));\n    } else {\n      this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\n    }\n  };\n  /** @inheritDoc */\n\n\n  NetworkRequest.prototype.getPromise = function () {\n    return this.promise_;\n  };\n  /** @inheritDoc */\n\n\n  NetworkRequest.prototype.cancel = function (appDelete) {\n    this.canceled_ = true;\n    this.appDelete_ = appDelete || false;\n\n    if (this.backoffId_ !== null) {\n      stop(this.backoffId_);\n    }\n\n    if (this.pendingXhr_ !== null) {\n      this.pendingXhr_.abort();\n    }\n  };\n\n  NetworkRequest.prototype.isRetryStatusCode_ = function (status) {\n    // The codes for which to retry came from this page:\n    // https://cloud.google.com/storage/docs/exponential-backoff\n    var isFiveHundredCode = status >= 500 && status < 600;\n    var extraRetryCodes = [// Request Timeout: web server didn't receive full request in time.\n    408, // Too Many Requests: you're getting rate-limited, basically.\n    429];\n    var isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\n    var isRequestSpecificRetryCode = this.additionalRetryCodes_.indexOf(status) !== -1;\n    return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;\n  };\n\n  return NetworkRequest;\n}();\n/**\r\n * A collection of information about the result of a network request.\r\n * @param opt_canceled - Defaults to false.\r\n */\n\n\nvar RequestEndStatus =\n/** @class */\nfunction () {\n  function RequestEndStatus(wasSuccessCode, xhr, canceled) {\n    this.wasSuccessCode = wasSuccessCode;\n    this.xhr = xhr;\n    this.canceled = !!canceled;\n  }\n\n  return RequestEndStatus;\n}();\n\nfunction addAuthHeader_(headers, authToken) {\n  if (authToken !== null && authToken.length > 0) {\n    headers['Authorization'] = 'Firebase ' + authToken;\n  }\n}\n\nfunction addVersionHeader_(headers) {\n  var version = typeof firebase !== 'undefined' ? firebase.SDK_VERSION : 'AppManager';\n  headers['X-Firebase-Storage-Version'] = 'webjs/' + version;\n}\n\nfunction addGmpidHeader_(headers, appId) {\n  if (appId) {\n    headers['X-Firebase-GMPID'] = appId;\n  }\n}\n\nfunction makeRequest(requestInfo, appId, authToken, pool) {\n  var queryPart = makeQueryString(requestInfo.urlParams);\n  var url = requestInfo.url + queryPart;\n  var headers = Object.assign({}, requestInfo.headers);\n  addGmpidHeader_(headers, appId);\n  addAuthHeader_(headers, authToken);\n  addVersionHeader_(headers);\n  return new NetworkRequest(url, requestInfo.method, headers, requestInfo.body, requestInfo.successCodes, requestInfo.additionalRetryCodes, requestInfo.handler, requestInfo.errorHandler, requestInfo.timeout, requestInfo.progressCallback, pool);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction isUrl(path) {\n  return /^[A-Za-z]+:\\/\\//.test(path);\n}\n/**\r\n * Returns a firebaseStorage.Reference for the given url.\r\n */\n\n\nfunction refFromURL(service, url) {\n  return new Reference(service, url);\n}\n/**\r\n * Returns a firebaseStorage.Reference for the given path in the default\r\n * bucket.\r\n */\n\n\nfunction refFromPath(ref, path) {\n  if (ref instanceof StorageService) {\n    var service = ref;\n\n    if (service._bucket == null) {\n      throw noDefaultBucket();\n    }\n\n    var reference = new Reference(service, service._bucket);\n\n    if (path != null) {\n      return refFromPath(reference, path);\n    } else {\n      return reference;\n    }\n  } else {\n    // ref is a Reference\n    if (path !== undefined) {\n      if (path.includes('..')) {\n        throw invalidArgument('`path` param cannot contain \"..\"');\n      }\n\n      return getChild(ref, path);\n    } else {\n      return ref;\n    }\n  }\n}\n\nfunction ref(serviceOrRef, pathOrUrl) {\n  if (pathOrUrl && isUrl(pathOrUrl)) {\n    if (serviceOrRef instanceof StorageService) {\n      return refFromURL(serviceOrRef, pathOrUrl);\n    } else {\n      throw invalidArgument('To use ref(service, url), the first argument must be a Storage instance.');\n    }\n  } else {\n    return refFromPath(serviceOrRef, pathOrUrl);\n  }\n}\n\nfunction extractBucket(config) {\n  var bucketString = config === null || config === void 0 ? void 0 : config[CONFIG_STORAGE_BUCKET_KEY];\n\n  if (bucketString == null) {\n    return null;\n  }\n\n  return Location.makeFromBucketSpec(bucketString);\n}\n/**\r\n * A service that provides Firebase Storage Reference instances.\r\n * @param opt_url - gs:// url to a custom Storage Bucket\r\n */\n\n\nvar StorageService =\n/** @class */\nfunction () {\n  function StorageService(app,\n  /**\r\n   * @internal\r\n   */\n  _authProvider,\n  /**\r\n   * @internal\r\n   */\n  _pool,\n  /**\r\n   * @internal\r\n   */\n  _url) {\n    this.app = app;\n    this._authProvider = _authProvider;\n    this._pool = _pool;\n    this._url = _url;\n    /**\r\n     * @internal\r\n     */\n\n    this._bucket = null;\n    this._appId = null;\n    this._deleted = false;\n    this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\n    this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\n    this._requests = new Set();\n\n    if (_url != null) {\n      this._bucket = Location.makeFromBucketSpec(_url);\n    } else {\n      this._bucket = extractBucket(this.app.options);\n    }\n  }\n\n  Object.defineProperty(StorageService.prototype, \"maxUploadRetryTime\", {\n    get: function () {\n      return this._maxUploadRetryTime;\n    },\n    set: function (time) {\n      validateNumber('time',\n      /* minValue=*/\n      0,\n      /* maxValue= */\n      Number.POSITIVE_INFINITY, time);\n      this._maxUploadRetryTime = time;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StorageService.prototype, \"maxOperationRetryTime\", {\n    get: function () {\n      return this._maxOperationRetryTime;\n    },\n    set: function (time) {\n      validateNumber('time',\n      /* minValue=*/\n      0,\n      /* maxValue= */\n      Number.POSITIVE_INFINITY, time);\n      this._maxOperationRetryTime = time;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  StorageService.prototype.getAuthToken = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var auth, tokenData;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            auth = this._authProvider.getImmediate({\n              optional: true\n            });\n            if (!auth) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , auth.getToken()];\n\n          case 1:\n            tokenData = _a.sent();\n\n            if (tokenData !== null) {\n              return [2\n              /*return*/\n              , tokenData.accessToken];\n            }\n\n            _a.label = 2;\n\n          case 2:\n            return [2\n            /*return*/\n            , null];\n        }\n      });\n    });\n  };\n  /**\r\n   * Stop running requests and prevent more from being created.\r\n   * @internal\r\n   */\n\n\n  StorageService.prototype._delete = function () {\n    this._deleted = true;\n\n    this._requests.forEach(function (request) {\n      return request.cancel();\n    });\n\n    this._requests.clear();\n\n    return Promise.resolve();\n  };\n  /**\r\n   * Returns a new firebaseStorage.Reference object referencing this StorageService\r\n   * at the given Location.\r\n   */\n\n\n  StorageService.prototype.makeStorageReference = function (loc) {\n    return new Reference(this, loc);\n  };\n  /**\r\n   * @internal\r\n   * @param requestInfo - HTTP RequestInfo object\r\n   * @param authToken - Firebase auth token\r\n   */\n\n\n  StorageService.prototype.makeRequest = function (requestInfo, authToken) {\n    var _this = this;\n\n    if (!this._deleted) {\n      var request_1 = makeRequest(requestInfo, this._appId, authToken, this._pool);\n\n      this._requests.add(request_1); // Request removes itself from set when complete.\n\n\n      request_1.getPromise().then(function () {\n        return _this._requests.delete(request_1);\n      }, function () {\n        return _this._requests.delete(request_1);\n      });\n      return request_1;\n    } else {\n      return new FailRequest(appDeleted());\n    }\n  };\n\n  return StorageService;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A service that provides firebaseStorage.Reference instances.\r\n * @param opt_url gs:// url to a custom Storage Bucket\r\n */\n\n\nvar StorageServiceCompat =\n/** @class */\nfunction () {\n  function StorageServiceCompat(app, _delegate) {\n    var _this = this;\n\n    this.app = app;\n    this._delegate = _delegate;\n    this.INTERNAL = {\n      /**\r\n       * Called when the associated app is deleted.\r\n       */\n      delete: function () {\n        return _this._delegate._delete();\n      }\n    };\n  }\n\n  Object.defineProperty(StorageServiceCompat.prototype, \"maxOperationRetryTime\", {\n    get: function () {\n      return this._delegate.maxOperationRetryTime;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(StorageServiceCompat.prototype, \"maxUploadRetryTime\", {\n    get: function () {\n      return this._delegate.maxUploadRetryTime;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Returns a firebaseStorage.Reference for the given path in the default\r\n   * bucket.\r\n   */\n\n  StorageServiceCompat.prototype.ref = function (path) {\n    if (isUrl(path)) {\n      throw invalidArgument('ref() expected a child path but got a URL, use refFromURL instead.');\n    }\n\n    return new ReferenceCompat(ref(this._delegate, path), this);\n  };\n  /**\r\n   * Returns a firebaseStorage.Reference object for the given absolute URL,\r\n   * which must be a gs:// or http[s]:// URL.\r\n   */\n\n\n  StorageServiceCompat.prototype.refFromURL = function (url) {\n    if (!isUrl(url)) {\n      throw invalidArgument('refFromURL() expected a full URL but got a child path, use ref() instead.');\n    }\n\n    try {\n      Location.makeFromUrl(url);\n    } catch (e) {\n      throw invalidArgument('refFromUrl() expected a valid full URL but got an invalid one.');\n    }\n\n    return new ReferenceCompat(ref(this._delegate, url), this);\n  };\n\n  StorageServiceCompat.prototype.setMaxUploadRetryTime = function (time) {\n    this._delegate.maxUploadRetryTime = time;\n  };\n\n  StorageServiceCompat.prototype.setMaxOperationRetryTime = function (time) {\n    this._delegate.maxOperationRetryTime = time;\n  };\n\n  return StorageServiceCompat;\n}();\n\nvar name = \"@firebase/storage\";\nvar version = \"0.4.2\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Type constant for Firebase Storage.\r\n */\n\nvar STORAGE_TYPE = 'storage';\n\nfunction factory(container, url) {\n  // Dependencies\n  // TODO: This should eventually be 'app-compat'\n  var app = container.getProvider('app').getImmediate();\n  var authProvider = container.getProvider('auth-internal'); // TODO: get StorageService instance from component framework instead\n  // of creating a new one.\n\n  var storageServiceCompat = new StorageServiceCompat(app, new StorageService(app, authProvider, new XhrIoPool(), url));\n  return storageServiceCompat;\n}\n\nfunction registerStorage(instance) {\n  var namespaceExports = {\n    // no-inline\n    TaskState: TaskState,\n    TaskEvent: TaskEvent,\n    StringFormat: StringFormat,\n    Storage: StorageService,\n    Reference: ReferenceCompat\n  };\n  instance.INTERNAL.registerComponent(new Component(STORAGE_TYPE, factory, \"PUBLIC\"\n  /* PUBLIC */\n  ).setServiceProps(namespaceExports).setMultipleInstances(true));\n  instance.registerVersion(name, version);\n}\n\nregisterStorage(firebase);\nexport { registerStorage };","map":{"version":3,"sources":["../src/implementation/constants.ts","../src/implementation/error.ts","../src/implementation/string.ts","../src/implementation/taskenums.ts","../src/implementation/xhrio.ts","../src/implementation/xhrio_network.ts","../src/implementation/xhriopool.ts","../src/implementation/type.ts","../src/implementation/fs.ts","../src/implementation/blob.ts","../src/implementation/location.ts","../src/implementation/json.ts","../src/implementation/path.ts","../src/implementation/url.ts","../src/implementation/metadata.ts","../src/implementation/list.ts","../src/implementation/requestinfo.ts","../src/implementation/requests.ts","../src/implementation/observer.ts","../src/tasksnapshot.ts","../src/implementation/async.ts","../src/task.ts","../src/reference.ts","../compat/tasksnapshot.ts","../compat/task.ts","../compat/list.ts","../compat/reference.ts","../src/implementation/failrequest.ts","../src/implementation/backoff.ts","../src/implementation/request.ts","../src/service.ts","../compat/service.ts","../compat/index.ts"],"names":["type.isNativeBlobDefined","type.isNativeBlob","fs.sliceBlob","fs.getBlob","type.isString","type.isNonArrayObject","path.lastComponent","json.jsonObjectOrNull","UrlUtils.makeUrl","UrlUtils.makeQueryString","MetadataUtils.fromResourceString","ListResultUtils.fromResponseString","MetadataUtils.downloadUrlFromResourceString","MetadataUtils.toResourceString","type.isFunction","fbsRequests.createResumableUpload","fbsRequests.getResumableUploadStatus","fbsRequests.resumableUploadChunkSize","fbsRequests.ResumableUploadStatus","fbsRequests.continueResumableUpload","fbsRequests.getMetadata","fbsRequests.multipartUpload","fbsAsync","list","requestsList","getMetadata","requestsGetMetadata","updateMetadata","requestsUpdateMetadata","requestsGetDownloadUrl","deleteObject","requestsDeleteObject","type.isJustDef","backoff.start","backoff.stop","constants.CONFIG_STORAGE_BUCKET_KEY","constants.DEFAULT_MAX_OPERATION_RETRY_TIME","constants.DEFAULT_MAX_UPLOAD_RETRY_TIME"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Constants used in the Firebase Storage library.\n */\n\n/**\n * Domain name for firebase storage.\n */\nexport const DEFAULT_HOST = 'firebasestorage.googleapis.com';\n\n/**\n * The key in Firebase config json for the storage bucket.\n */\nexport const CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\n\n/**\n * 2 minutes\n *\n * The timeout for all operations except upload.\n */\nexport const DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\n\n/**\n * 10 minutes\n *\n * The timeout for upload.\n */\nexport const DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\n\n/**\n * This is the value of Number.MIN_SAFE_INTEGER, which is not well supported\n * enough for us to use it directly.\n */\nexport const MIN_SAFE_INTEGER = -9007199254740991;\n","import { FirebaseError } from '@firebase/util';\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { CONFIG_STORAGE_BUCKET_KEY } from './constants';\n\nexport class FirebaseStorageError extends FirebaseError {\n  customData: { serverResponse: string | null } = { serverResponse: null };\n\n  constructor(code: Code, message: string) {\n    super(\n      prependCode(code),\n      `Firebase Storage: ${message} (${prependCode(code)})`\n    );\n    // Without this, `instanceof FirebaseStorageError`, in tests for example,\n    // returns false.\n    Object.setPrototypeOf(this, FirebaseStorageError.prototype);\n  }\n\n  codeEquals(code: Code): boolean {\n    return prependCode(code) === this.code;\n  }\n\n  get message(): string {\n    if (this.customData.serverResponse) {\n      return `${this.message}\\n${this.customData.serverResponse}`;\n    } else {\n      return this.message;\n    }\n  }\n\n  get serverResponse(): null | string {\n    return this.customData.serverResponse;\n  }\n\n  set serverResponse(serverResponse: string | null) {\n    this.customData.serverResponse = serverResponse;\n  }\n}\n\nexport const errors = {};\n\nexport type Code = string;\nexport const Code = {\n  // Shared between all platforms\n  UNKNOWN: 'unknown',\n  OBJECT_NOT_FOUND: 'object-not-found',\n  BUCKET_NOT_FOUND: 'bucket-not-found',\n  PROJECT_NOT_FOUND: 'project-not-found',\n  QUOTA_EXCEEDED: 'quota-exceeded',\n  UNAUTHENTICATED: 'unauthenticated',\n  UNAUTHORIZED: 'unauthorized',\n  RETRY_LIMIT_EXCEEDED: 'retry-limit-exceeded',\n  INVALID_CHECKSUM: 'invalid-checksum',\n  CANCELED: 'canceled',\n  // JS specific\n  INVALID_EVENT_NAME: 'invalid-event-name',\n  INVALID_URL: 'invalid-url',\n  INVALID_DEFAULT_BUCKET: 'invalid-default-bucket',\n  NO_DEFAULT_BUCKET: 'no-default-bucket',\n  CANNOT_SLICE_BLOB: 'cannot-slice-blob',\n  SERVER_FILE_WRONG_SIZE: 'server-file-wrong-size',\n  NO_DOWNLOAD_URL: 'no-download-url',\n  INVALID_ARGUMENT: 'invalid-argument',\n  INVALID_ARGUMENT_COUNT: 'invalid-argument-count',\n  APP_DELETED: 'app-deleted',\n  INVALID_ROOT_OPERATION: 'invalid-root-operation',\n  INVALID_FORMAT: 'invalid-format',\n  INTERNAL_ERROR: 'internal-error',\n  UNSUPPORTED_ENVIRONMENT: 'unsupported-environment'\n};\n\nexport function prependCode(code: Code): string {\n  return 'storage/' + code;\n}\n\nexport function unknown(): FirebaseStorageError {\n  const message =\n    'An unknown error occurred, please check the error payload for ' +\n    'server response.';\n  return new FirebaseStorageError(Code.UNKNOWN, message);\n}\n\nexport function objectNotFound(path: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.OBJECT_NOT_FOUND,\n    \"Object '\" + path + \"' does not exist.\"\n  );\n}\n\nexport function bucketNotFound(bucket: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.BUCKET_NOT_FOUND,\n    \"Bucket '\" + bucket + \"' does not exist.\"\n  );\n}\n\nexport function projectNotFound(project: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.PROJECT_NOT_FOUND,\n    \"Project '\" + project + \"' does not exist.\"\n  );\n}\n\nexport function quotaExceeded(bucket: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.QUOTA_EXCEEDED,\n    \"Quota for bucket '\" +\n      bucket +\n      \"' exceeded, please view quota on \" +\n      'https://firebase.google.com/pricing/.'\n  );\n}\n\nexport function unauthenticated(): FirebaseStorageError {\n  const message =\n    'User is not authenticated, please authenticate using Firebase ' +\n    'Authentication and try again.';\n  return new FirebaseStorageError(Code.UNAUTHENTICATED, message);\n}\n\nexport function unauthorized(path: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.UNAUTHORIZED,\n    \"User does not have permission to access '\" + path + \"'.\"\n  );\n}\n\nexport function retryLimitExceeded(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.RETRY_LIMIT_EXCEEDED,\n    'Max retry time for operation exceeded, please try again.'\n  );\n}\n\nexport function invalidChecksum(\n  path: string,\n  checksum: string,\n  calculated: string\n): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.INVALID_CHECKSUM,\n    \"Uploaded/downloaded object '\" +\n      path +\n      \"' has checksum '\" +\n      checksum +\n      \"' which does not match '\" +\n      calculated +\n      \"'. Please retry the upload/download.\"\n  );\n}\n\nexport function canceled(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.CANCELED,\n    'User canceled the upload/download.'\n  );\n}\n\nexport function invalidEventName(name: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.INVALID_EVENT_NAME,\n    \"Invalid event name '\" + name + \"'.\"\n  );\n}\n\nexport function invalidUrl(url: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.INVALID_URL,\n    \"Invalid URL '\" + url + \"'.\"\n  );\n}\n\nexport function invalidDefaultBucket(bucket: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.INVALID_DEFAULT_BUCKET,\n    \"Invalid default bucket '\" + bucket + \"'.\"\n  );\n}\n\nexport function noDefaultBucket(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.NO_DEFAULT_BUCKET,\n    'No default bucket ' +\n      \"found. Did you set the '\" +\n      CONFIG_STORAGE_BUCKET_KEY +\n      \"' property when initializing the app?\"\n  );\n}\n\nexport function cannotSliceBlob(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.CANNOT_SLICE_BLOB,\n    'Cannot slice blob for upload. Please retry the upload.'\n  );\n}\n\nexport function serverFileWrongSize(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.SERVER_FILE_WRONG_SIZE,\n    'Server recorded incorrect upload file size, please retry the upload.'\n  );\n}\n\nexport function noDownloadURL(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.NO_DOWNLOAD_URL,\n    'The given file does not have any download URLs.'\n  );\n}\n\nexport function invalidArgument(message: string): FirebaseStorageError {\n  return new FirebaseStorageError(Code.INVALID_ARGUMENT, message);\n}\n\nexport function invalidArgumentCount(\n  argMin: number,\n  argMax: number,\n  fnName: string,\n  real: number\n): FirebaseStorageError {\n  let countPart;\n  let plural;\n  if (argMin === argMax) {\n    countPart = argMin;\n    plural = argMin === 1 ? 'argument' : 'arguments';\n  } else {\n    countPart = 'between ' + argMin + ' and ' + argMax;\n    plural = 'arguments';\n  }\n  return new FirebaseStorageError(\n    Code.INVALID_ARGUMENT_COUNT,\n    'Invalid argument count in `' +\n      fnName +\n      '`: Expected ' +\n      countPart +\n      ' ' +\n      plural +\n      ', received ' +\n      real +\n      '.'\n  );\n}\n\nexport function appDeleted(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.APP_DELETED,\n    'The Firebase app was deleted.'\n  );\n}\n\n/**\n * @param name - The name of the operation that was invalid.\n */\nexport function invalidRootOperation(name: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.INVALID_ROOT_OPERATION,\n    \"The operation '\" +\n      name +\n      \"' cannot be performed on a root reference, create a non-root \" +\n      \"reference using child, such as .child('file.png').\"\n  );\n}\n\n/**\n * @param format - The format that was not valid.\n * @param message - A message describing the format violation.\n */\nexport function invalidFormat(\n  format: string,\n  message: string\n): FirebaseStorageError {\n  return new FirebaseStorageError(\n    Code.INVALID_FORMAT,\n    \"String does not match format '\" + format + \"': \" + message\n  );\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function internalError(message: string): FirebaseStorageError {\n  throw new FirebaseStorageError(\n    Code.INTERNAL_ERROR,\n    'Internal error: ' + message\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { unknown, invalidFormat } from './error';\n\n/**\n * An enumeration of the possible string formats for upload.\n */\nexport type StringFormat = string;\nexport const StringFormat = {\n  RAW: 'raw',\n  BASE64: 'base64',\n  BASE64URL: 'base64url',\n  DATA_URL: 'data_url'\n};\n\nexport class StringData {\n  contentType: string | null;\n\n  constructor(public data: Uint8Array, contentType?: string | null) {\n    this.contentType = contentType || null;\n  }\n}\n\nexport function dataFromString(\n  format: StringFormat,\n  stringData: string\n): StringData {\n  switch (format) {\n    case StringFormat.RAW:\n      return new StringData(utf8Bytes_(stringData));\n    case StringFormat.BASE64:\n    case StringFormat.BASE64URL:\n      return new StringData(base64Bytes_(format, stringData));\n    case StringFormat.DATA_URL:\n      return new StringData(\n        dataURLBytes_(stringData),\n        dataURLContentType_(stringData)\n      );\n    default:\n    // do nothing\n  }\n\n  // assert(false);\n  throw unknown();\n}\n\nexport function utf8Bytes_(value: string): Uint8Array {\n  const b: number[] = [];\n  for (let i = 0; i < value.length; i++) {\n    let c = value.charCodeAt(i);\n    if (c <= 127) {\n      b.push(c);\n    } else {\n      if (c <= 2047) {\n        b.push(192 | (c >> 6), 128 | (c & 63));\n      } else {\n        if ((c & 64512) === 55296) {\n          // The start of a surrogate pair.\n          const valid =\n            i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\n          if (!valid) {\n            // The second surrogate wasn't there.\n            b.push(239, 191, 189);\n          } else {\n            const hi = c;\n            const lo = value.charCodeAt(++i);\n            c = 65536 | ((hi & 1023) << 10) | (lo & 1023);\n            b.push(\n              240 | (c >> 18),\n              128 | ((c >> 12) & 63),\n              128 | ((c >> 6) & 63),\n              128 | (c & 63)\n            );\n          }\n        } else {\n          if ((c & 64512) === 56320) {\n            // Invalid low surrogate.\n            b.push(239, 191, 189);\n          } else {\n            b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));\n          }\n        }\n      }\n    }\n  }\n  return new Uint8Array(b);\n}\n\nexport function percentEncodedBytes_(value: string): Uint8Array {\n  let decoded;\n  try {\n    decoded = decodeURIComponent(value);\n  } catch (e) {\n    throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\n  }\n  return utf8Bytes_(decoded);\n}\n\nexport function base64Bytes_(format: StringFormat, value: string): Uint8Array {\n  switch (format) {\n    case StringFormat.BASE64: {\n      const hasMinus = value.indexOf('-') !== -1;\n      const hasUnder = value.indexOf('_') !== -1;\n      if (hasMinus || hasUnder) {\n        const invalidChar = hasMinus ? '-' : '_';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" +\n            invalidChar +\n            \"' found: is it base64url encoded?\"\n        );\n      }\n      break;\n    }\n    case StringFormat.BASE64URL: {\n      const hasPlus = value.indexOf('+') !== -1;\n      const hasSlash = value.indexOf('/') !== -1;\n      if (hasPlus || hasSlash) {\n        const invalidChar = hasPlus ? '+' : '/';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\"\n        );\n      }\n      value = value.replace(/-/g, '+').replace(/_/g, '/');\n      break;\n    }\n    default:\n    // do nothing\n  }\n  let bytes;\n  try {\n    bytes = atob(value);\n  } catch (e) {\n    throw invalidFormat(format, 'Invalid character found');\n  }\n  const array = new Uint8Array(bytes.length);\n  for (let i = 0; i < bytes.length; i++) {\n    array[i] = bytes.charCodeAt(i);\n  }\n  return array;\n}\n\nclass DataURLParts {\n  base64: boolean = false;\n  contentType: string | null = null;\n  rest: string;\n\n  constructor(dataURL: string) {\n    const matches = dataURL.match(/^data:([^,]+)?,/);\n    if (matches === null) {\n      throw invalidFormat(\n        StringFormat.DATA_URL,\n        \"Must be formatted 'data:[<mediatype>][;base64],<data>\"\n      );\n    }\n    const middle = matches[1] || null;\n    if (middle != null) {\n      this.base64 = endsWith(middle, ';base64');\n      this.contentType = this.base64\n        ? middle.substring(0, middle.length - ';base64'.length)\n        : middle;\n    }\n    this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n  }\n}\n\nexport function dataURLBytes_(dataUrl: string): Uint8Array {\n  const parts = new DataURLParts(dataUrl);\n  if (parts.base64) {\n    return base64Bytes_(StringFormat.BASE64, parts.rest);\n  } else {\n    return percentEncodedBytes_(parts.rest);\n  }\n}\n\nexport function dataURLContentType_(dataUrl: string): string | null {\n  const parts = new DataURLParts(dataUrl);\n  return parts.contentType;\n}\n\nfunction endsWith(s: string, end: string): boolean {\n  const longEnough = s.length >= end.length;\n  if (!longEnough) {\n    return false;\n  }\n\n  return s.substring(s.length - end.length) === end;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Enumerations used for upload tasks.\n */\n\n/**\n * Enum for task events.\n */\nexport type TaskEvent = string;\nexport const TaskEvent = {\n  /** Triggered whenever the task changes or progress is updated. */\n  STATE_CHANGED: 'state_changed'\n};\n\n/**\n * Internal enum for task state.\n */\nexport type InternalTaskState = string;\nexport const InternalTaskState = {\n  RUNNING: 'running',\n  PAUSING: 'pausing',\n  PAUSED: 'paused',\n  SUCCESS: 'success',\n  CANCELING: 'canceling',\n  CANCELED: 'canceled',\n  ERROR: 'error'\n};\n\n/**\n * External (API-surfaced) enum for task state.\n */\nexport type TaskState = string;\nexport const TaskState = {\n  /** The task is currently transferring data. */\n  RUNNING: 'running',\n  /** The task was paused by the user. */\n  PAUSED: 'paused',\n  /** The task completed successfully. */\n  SUCCESS: 'success',\n  /** The task was canceled. */\n  CANCELED: 'canceled',\n  /** The task failed with an error. */\n  ERROR: 'error'\n};\n\nexport function taskStateFromInternalTaskState(\n  state: InternalTaskState\n): TaskState {\n  switch (state) {\n    case InternalTaskState.RUNNING:\n    case InternalTaskState.PAUSING:\n    case InternalTaskState.CANCELING:\n      return TaskState.RUNNING;\n    case InternalTaskState.PAUSED:\n      return TaskState.PAUSED;\n    case InternalTaskState.SUCCESS:\n      return TaskState.SUCCESS;\n    case InternalTaskState.CANCELED:\n      return TaskState.CANCELED;\n    case InternalTaskState.ERROR:\n      return TaskState.ERROR;\n    default:\n      // TODO(andysoto): assert(false);\n      return TaskState.ERROR;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview A lightweight wrapper around XMLHttpRequest with a\n * goog.net.XhrIo-like interface.\n */\n\n/**\n * XHR headers\n */\nexport interface Headers {\n  [name: string]: string | number;\n}\n\nexport interface XhrIo {\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string | null,\n    headers?: Headers\n  ): Promise<XhrIo>;\n\n  getErrorCode(): ErrorCode;\n\n  getStatus(): number;\n\n  getResponseText(): string;\n\n  /**\n   * Abort the request.\n   */\n  abort(): void;\n\n  getResponseHeader(header: string): string | null;\n\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n}\n\nexport enum ErrorCode {\n  NO_ERROR = 0,\n  NETWORK_ERROR = 1,\n  ABORT = 2\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Headers, XhrIo, ErrorCode } from './xhrio';\nimport { internalError } from './error';\n\n/**\n * We use this instead of goog.net.XhrIo because goog.net.XhrIo is hyuuuuge and\n * doesn't work in React Native on Android.\n */\nexport class NetworkXhrIo implements XhrIo {\n  private xhr_: XMLHttpRequest;\n  private errorCode_: ErrorCode;\n  private sendPromise_: Promise<XhrIo>;\n  private sent_: boolean = false;\n\n  constructor() {\n    this.xhr_ = new XMLHttpRequest();\n    this.errorCode_ = ErrorCode.NO_ERROR;\n    this.sendPromise_ = new Promise(resolve => {\n      this.xhr_.addEventListener('abort', () => {\n        this.errorCode_ = ErrorCode.ABORT;\n        resolve(this);\n      });\n      this.xhr_.addEventListener('error', () => {\n        this.errorCode_ = ErrorCode.NETWORK_ERROR;\n        resolve(this);\n      });\n      this.xhr_.addEventListener('load', () => {\n        resolve(this);\n      });\n    });\n  }\n\n  /**\n   * @override\n   */\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string,\n    headers?: Headers\n  ): Promise<XhrIo> {\n    if (this.sent_) {\n      throw internalError('cannot .send() more than once');\n    }\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n    if (headers !== undefined) {\n      for (const key in headers) {\n        if (headers.hasOwnProperty(key)) {\n          this.xhr_.setRequestHeader(key, headers[key].toString());\n        }\n      }\n    }\n    if (body !== undefined) {\n      this.xhr_.send(body);\n    } else {\n      this.xhr_.send();\n    }\n    return this.sendPromise_;\n  }\n\n  /**\n   * @override\n   */\n  getErrorCode(): ErrorCode {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorCode() before sending');\n    }\n    return this.errorCode_;\n  }\n\n  /**\n   * @override\n   */\n  getStatus(): number {\n    if (!this.sent_) {\n      throw internalError('cannot .getStatus() before sending');\n    }\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  }\n\n  /**\n   * @override\n   */\n  getResponseText(): string {\n    if (!this.sent_) {\n      throw internalError('cannot .getResponseText() before sending');\n    }\n    return this.xhr_.responseText;\n  }\n\n  /**\n   * Aborts the request.\n   * @override\n   */\n  abort(): void {\n    this.xhr_.abort();\n  }\n\n  /**\n   * @override\n   */\n  getResponseHeader(header: string): string | null {\n    return this.xhr_.getResponseHeader(header);\n  }\n\n  /**\n   * @override\n   */\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  }\n\n  /**\n   * @override\n   */\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Replacement for goog.net.XhrIoPool that works with fbs.XhrIo.\n */\nimport { XhrIo } from './xhrio';\nimport { NetworkXhrIo } from './xhrio_network';\n\n/**\n * Factory-like class for creating XhrIo instances.\n */\nexport class XhrIoPool {\n  createXhrIo(): XhrIo {\n    return new NetworkXhrIo();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Code, FirebaseStorageError } from './error';\n\nexport function isJustDef<T>(p: T | null | undefined): p is T | null {\n  return p !== void 0;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isFunction(p: unknown): p is Function {\n  return typeof p === 'function';\n}\n\nexport function isNonArrayObject(p: unknown): boolean {\n  return typeof p === 'object' && !Array.isArray(p);\n}\n\nexport function isString(p: unknown): p is string {\n  return typeof p === 'string' || p instanceof String;\n}\n\nexport function isNativeBlob(p: unknown): p is Blob {\n  return isNativeBlobDefined() && p instanceof Blob;\n}\n\nexport function isNativeBlobDefined(): boolean {\n  return typeof Blob !== 'undefined';\n}\n\nexport function validateNumber(\n  argument: string,\n  minValue: number,\n  maxValue: number,\n  value: number\n): void {\n  if (value < minValue) {\n    throw new FirebaseStorageError(\n      Code.INVALID_ARGUMENT,\n      `Invalid value for '${argument}'. Expected ${minValue} or greater.`\n    );\n  }\n  if (value > maxValue) {\n    throw new FirebaseStorageError(\n      Code.INVALID_ARGUMENT,\n      `Invalid value for '${argument}'. Expected ${maxValue} or less.`\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Some methods copied from goog.fs.\n * We don't include goog.fs because it pulls in a bunch of Deferred code that\n * bloats the size of the released binary.\n */\nimport * as type from './type';\nimport { Code, FirebaseStorageError } from './error';\n\nfunction getBlobBuilder(): typeof IBlobBuilder | undefined {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Concatenates one or more values together and converts them to a Blob.\n *\n * @param args The values that will make up the resulting blob.\n * @return The blob.\n */\nexport function getBlob(...args: Array<string | Blob | ArrayBuffer>): Blob {\n  const BlobBuilder = getBlobBuilder();\n  if (BlobBuilder !== undefined) {\n    const bb = new BlobBuilder();\n    for (let i = 0; i < args.length; i++) {\n      bb.append(args[i]);\n    }\n    return bb.getBlob();\n  } else {\n    if (type.isNativeBlobDefined()) {\n      return new Blob(args);\n    } else {\n      throw new FirebaseStorageError(\n        Code.UNSUPPORTED_ENVIRONMENT,\n        \"This browser doesn't seem to support creating Blobs\"\n      );\n    }\n  }\n}\n\n/**\n * Slices the blob. The returned blob contains data from the start byte\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\n *\n * @param blob The blob to be sliced.\n * @param start Index of the starting byte.\n * @param end Index of the ending byte.\n * @return The blob slice or null if not supported.\n */\nexport function sliceBlob(blob: Blob, start: number, end: number): Blob | null {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  } else if (blob.mozSlice) {\n    return blob.mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file Provides a Blob-like wrapper for various binary types (including the\n * native Blob type). This makes it possible to upload types like ArrayBuffers,\n * making uploads possible in environments without the native Blob type.\n */\nimport * as fs from './fs';\nimport { StringFormat, dataFromString } from './string';\nimport * as type from './type';\n\n/**\n * @param opt_elideCopy - If true, doesn't copy mutable input data\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\n *     modified after this blob's construction.\n */\nexport class FbsBlob {\n  private data_!: Blob | Uint8Array;\n  private size_: number;\n  private type_: string;\n\n  constructor(data: Blob | Uint8Array | ArrayBuffer, elideCopy?: boolean) {\n    let size: number = 0;\n    let blobType: string = '';\n    if (type.isNativeBlob(data)) {\n      this.data_ = data as Blob;\n      size = (data as Blob).size;\n      blobType = (data as Blob).type;\n    } else if (data instanceof ArrayBuffer) {\n      if (elideCopy) {\n        this.data_ = new Uint8Array(data);\n      } else {\n        this.data_ = new Uint8Array(data.byteLength);\n        this.data_.set(new Uint8Array(data));\n      }\n      size = this.data_.length;\n    } else if (data instanceof Uint8Array) {\n      if (elideCopy) {\n        this.data_ = data as Uint8Array;\n      } else {\n        this.data_ = new Uint8Array(data.length);\n        this.data_.set(data as Uint8Array);\n      }\n      size = data.length;\n    }\n    this.size_ = size;\n    this.type_ = blobType;\n  }\n\n  size(): number {\n    return this.size_;\n  }\n\n  type(): string {\n    return this.type_;\n  }\n\n  slice(startByte: number, endByte: number): FbsBlob | null {\n    if (type.isNativeBlob(this.data_)) {\n      const realBlob = this.data_ as Blob;\n      const sliced = fs.sliceBlob(realBlob, startByte, endByte);\n      if (sliced === null) {\n        return null;\n      }\n      return new FbsBlob(sliced);\n    } else {\n      const slice = new Uint8Array(\n        (this.data_ as Uint8Array).buffer,\n        startByte,\n        endByte - startByte\n      );\n      return new FbsBlob(slice, true);\n    }\n  }\n\n  static getBlob(...args: Array<string | FbsBlob>): FbsBlob | null {\n    if (type.isNativeBlobDefined()) {\n      const blobby: Array<Blob | Uint8Array | string> = args.map(\n        (val: string | FbsBlob): Blob | Uint8Array | string => {\n          if (val instanceof FbsBlob) {\n            return val.data_;\n          } else {\n            return val;\n          }\n        }\n      );\n      return new FbsBlob(fs.getBlob.apply(null, blobby));\n    } else {\n      const uint8Arrays: Uint8Array[] = args.map(\n        (val: string | FbsBlob): Uint8Array => {\n          if (type.isString(val)) {\n            return dataFromString(StringFormat.RAW, val as string).data;\n          } else {\n            // Blobs don't exist, so this has to be a Uint8Array.\n            return (val as FbsBlob).data_ as Uint8Array;\n          }\n        }\n      );\n      let finalLength = 0;\n      uint8Arrays.forEach((array: Uint8Array): void => {\n        finalLength += array.byteLength;\n      });\n      const merged = new Uint8Array(finalLength);\n      let index = 0;\n      uint8Arrays.forEach((array: Uint8Array) => {\n        for (let i = 0; i < array.length; i++) {\n          merged[index++] = array[i];\n        }\n      });\n      return new FbsBlob(merged, true);\n    }\n  }\n\n  uploadData(): Blob | Uint8Array {\n    return this.data_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functionality related to the parsing/composition of bucket/\n * object location.\n */\n\nimport { invalidDefaultBucket, invalidUrl } from './error';\nimport { DEFAULT_HOST } from './constants';\n\nexport class Location {\n  private path_: string;\n\n  constructor(public readonly bucket: string, path: string) {\n    this.path_ = path;\n  }\n\n  get path(): string {\n    return this.path_;\n  }\n\n  get isRoot(): boolean {\n    return this.path.length === 0;\n  }\n\n  fullServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n  }\n\n  bucketOnlyServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o';\n  }\n\n  static makeFromBucketSpec(bucketString: string): Location {\n    let bucketLocation;\n    try {\n      bucketLocation = Location.makeFromUrl(bucketString);\n    } catch (e) {\n      // Not valid URL, use as-is. This lets you put bare bucket names in\n      // config.\n      return new Location(bucketString, '');\n    }\n    if (bucketLocation.path === '') {\n      return bucketLocation;\n    } else {\n      throw invalidDefaultBucket(bucketString);\n    }\n  }\n\n  static makeFromUrl(url: string): Location {\n    let location: Location | null = null;\n    const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\n\n    function gsModify(loc: Location): void {\n      if (loc.path.charAt(loc.path.length - 1) === '/') {\n        loc.path_ = loc.path_.slice(0, -1);\n      }\n    }\n    const gsPath = '(/(.*))?$';\n    const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n    const gsIndices = { bucket: 1, path: 3 };\n\n    function httpModify(loc: Location): void {\n      loc.path_ = decodeURIComponent(loc.path);\n    }\n    const version = 'v[A-Za-z0-9_]+';\n    const firebaseStorageHost = DEFAULT_HOST.replace(/[.]/g, '\\\\.');\n    const firebaseStoragePath = '(/([^?#]*).*)?$';\n    const firebaseStorageRegExp = new RegExp(\n      `^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`,\n      'i'\n    );\n    const firebaseStorageIndices = { bucket: 1, path: 3 };\n\n    const cloudStorageHost =\n      '(?:storage.googleapis.com|storage.cloud.google.com)';\n    const cloudStoragePath = '([^?#]*)';\n    const cloudStorageRegExp = new RegExp(\n      `^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`,\n      'i'\n    );\n    const cloudStorageIndices = { bucket: 1, path: 2 };\n\n    const groups = [\n      { regex: gsRegex, indices: gsIndices, postModify: gsModify },\n      {\n        regex: firebaseStorageRegExp,\n        indices: firebaseStorageIndices,\n        postModify: httpModify\n      },\n      {\n        regex: cloudStorageRegExp,\n        indices: cloudStorageIndices,\n        postModify: httpModify\n      }\n    ];\n    for (let i = 0; i < groups.length; i++) {\n      const group = groups[i];\n      const captures = group.regex.exec(url);\n      if (captures) {\n        const bucketValue = captures[group.indices.bucket];\n        let pathValue = captures[group.indices.path];\n        if (!pathValue) {\n          pathValue = '';\n        }\n        location = new Location(bucketValue, pathValue);\n        group.postModify(location);\n        break;\n      }\n    }\n    if (location == null) {\n      throw invalidUrl(url);\n    }\n    return location;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as type from './type';\n\n/**\n * Returns the Object resulting from parsing the given JSON, or null if the\n * given string does not represent a JSON object.\n */\nexport function jsonObjectOrNull(\n  s: string\n): { [name: string]: unknown } | null {\n  let obj;\n  try {\n    obj = JSON.parse(s);\n  } catch (e) {\n    return null;\n  }\n  if (type.isNonArrayObject(obj)) {\n    return obj;\n  } else {\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Contains helper methods for manipulating paths.\n */\n\n/**\n * @return Null if the path is already at the root.\n */\nexport function parent(path: string): string | null {\n  if (path.length === 0) {\n    return null;\n  }\n  const index = path.lastIndexOf('/');\n  if (index === -1) {\n    return '';\n  }\n  const newPath = path.slice(0, index);\n  return newPath;\n}\n\nexport function child(path: string, childPath: string): string {\n  const canonicalChildPath = childPath\n    .split('/')\n    .filter(component => component.length > 0)\n    .join('/');\n  if (path.length === 0) {\n    return canonicalChildPath;\n  } else {\n    return path + '/' + canonicalChildPath;\n  }\n}\n\n/**\n * Returns the last component of a path.\n * '/foo/bar' -> 'bar'\n * '/foo/bar/baz/' -> 'baz/'\n * '/a' -> 'a'\n */\nexport function lastComponent(path: string): string {\n  const index = path.lastIndexOf('/', path.length - 2);\n  if (index === -1) {\n    return path;\n  } else {\n    return path.slice(index + 1);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functions to create and manipulate URLs for the server API.\n */\nimport { DEFAULT_HOST } from './constants';\nimport { UrlParams } from './requestinfo';\n\nexport function makeUrl(urlPart: string): string {\n  return `https://${DEFAULT_HOST}/v0${urlPart}`;\n}\n\nexport function makeQueryString(params: UrlParams): string {\n  const encode = encodeURIComponent;\n  let queryPart = '?';\n  for (const key in params) {\n    if (params.hasOwnProperty(key)) {\n      const nextPart = encode(key) + '=' + encode(params[key]);\n      queryPart = queryPart + nextPart + '&';\n    }\n  }\n\n  // Chop off the extra '&' or '?' on the end\n  queryPart = queryPart.slice(0, -1);\n  return queryPart;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the metadata format\n */\nimport { Metadata } from '../metadata';\n\nimport * as json from './json';\nimport { Location } from './location';\nimport * as path from './path';\nimport * as type from './type';\nimport * as UrlUtils from './url';\nimport { Reference } from '../reference';\nimport { StorageService } from '../service';\n\nexport function noXform_<T>(metadata: Metadata, value: T): T {\n  return value;\n}\n\nclass Mapping<T> {\n  local: string;\n  writable: boolean;\n  xform: (p1: Metadata, p2?: T) => T | undefined;\n\n  constructor(\n    public server: string,\n    local?: string | null,\n    writable?: boolean,\n    xform?: ((p1: Metadata, p2?: T) => T | undefined) | null\n  ) {\n    this.local = local || server;\n    this.writable = !!writable;\n    this.xform = xform || noXform_;\n  }\n}\ntype Mappings = Array<Mapping<string> | Mapping<number>>;\n\nexport { Mappings };\n\nlet mappings_: Mappings | null = null;\n\nexport function xformPath(fullPath: string | undefined): string | undefined {\n  if (!type.isString(fullPath) || fullPath.length < 2) {\n    return fullPath;\n  } else {\n    return path.lastComponent(fullPath);\n  }\n}\n\nexport function getMappings(): Mappings {\n  if (mappings_) {\n    return mappings_;\n  }\n  const mappings: Mappings = [];\n  mappings.push(new Mapping<string>('bucket'));\n  mappings.push(new Mapping<string>('generation'));\n  mappings.push(new Mapping<string>('metageneration'));\n  mappings.push(new Mapping<string>('name', 'fullPath', true));\n\n  function mappingsXformPath(\n    _metadata: Metadata,\n    fullPath: string | undefined\n  ): string | undefined {\n    return xformPath(fullPath);\n  }\n  const nameMapping = new Mapping<string>('name');\n  nameMapping.xform = mappingsXformPath;\n  mappings.push(nameMapping);\n\n  /**\n   * Coerces the second param to a number, if it is defined.\n   */\n  function xformSize(\n    _metadata: Metadata,\n    size?: number | string\n  ): number | undefined {\n    if (size !== undefined) {\n      return Number(size);\n    } else {\n      return size;\n    }\n  }\n  const sizeMapping = new Mapping<number>('size');\n  sizeMapping.xform = xformSize;\n  mappings.push(sizeMapping);\n  mappings.push(new Mapping<number>('timeCreated'));\n  mappings.push(new Mapping<string>('updated'));\n  mappings.push(new Mapping<string>('md5Hash', null, true));\n  mappings.push(new Mapping<string>('cacheControl', null, true));\n  mappings.push(new Mapping<string>('contentDisposition', null, true));\n  mappings.push(new Mapping<string>('contentEncoding', null, true));\n  mappings.push(new Mapping<string>('contentLanguage', null, true));\n  mappings.push(new Mapping<string>('contentType', null, true));\n  mappings.push(new Mapping<string>('metadata', 'customMetadata', true));\n  mappings_ = mappings;\n  return mappings_;\n}\n\nexport function addRef(metadata: Metadata, service: StorageService): void {\n  function generateRef(): Reference {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const loc = new Location(bucket, path);\n    return service.makeStorageReference(loc);\n  }\n  Object.defineProperty(metadata, 'ref', { get: generateRef });\n}\n\nexport function fromResource(\n  service: StorageService,\n  resource: { [name: string]: unknown },\n  mappings: Mappings\n): Metadata {\n  const metadata: Metadata = {} as Metadata;\n  metadata['type'] = 'file';\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    metadata[mapping.local] = (mapping as Mapping<unknown>).xform(\n      metadata,\n      resource[mapping.server]\n    );\n  }\n  addRef(metadata, service);\n  return metadata;\n}\n\nexport function fromResourceString(\n  service: StorageService,\n  resourceString: string,\n  mappings: Mappings\n): Metadata | null {\n  const obj = json.jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = obj as Metadata;\n  return fromResource(service, resource, mappings);\n}\n\nexport function downloadUrlFromResourceString(\n  metadata: Metadata,\n  resourceString: string\n): string | null {\n  const obj = json.jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  if (!type.isString(obj['downloadTokens'])) {\n    // This can happen if objects are uploaded through GCS and retrieved\n    // through list, so we don't want to throw an Error.\n    return null;\n  }\n  const tokens: string = obj['downloadTokens'] as string;\n  if (tokens.length === 0) {\n    return null;\n  }\n  const encode = encodeURIComponent;\n  const tokensList = tokens.split(',');\n  const urls = tokensList.map((token: string): string => {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\n    const base = UrlUtils.makeUrl(urlPart);\n    const queryString = UrlUtils.makeQueryString({\n      alt: 'media',\n      token\n    });\n    return base + queryString;\n  });\n  return urls[0];\n}\n\nexport function toResourceString(\n  metadata: Metadata,\n  mappings: Mappings\n): string {\n  const resource: {\n    [prop: string]: unknown;\n  } = {};\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    if (mapping.writable) {\n      resource[mapping.server] = metadata[mapping.local];\n    }\n  }\n  return JSON.stringify(resource);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the listOptions and listResult format\n */\nimport { Location } from './location';\nimport * as json from './json';\nimport { ListResult } from '../list';\nimport { StorageService } from '../service';\n\n/**\n * Represents the simplified object metadata returned by List API.\n * Other fields are filtered because list in Firebase Rules does not grant\n * the permission to read the metadata.\n */\ninterface ListMetadataResponse {\n  name: string;\n  bucket: string;\n}\n\n/**\n * Represents the JSON response of List API.\n */\ninterface ListResultResponse {\n  prefixes: string[];\n  items: ListMetadataResponse[];\n  nextPageToken?: string;\n}\n\nconst PREFIXES_KEY = 'prefixes';\nconst ITEMS_KEY = 'items';\n\nfunction fromBackendResponse(\n  service: StorageService,\n  bucket: string,\n  resource: ListResultResponse\n): ListResult {\n  const listResult: ListResult = {\n    prefixes: [],\n    items: [],\n    nextPageToken: resource['nextPageToken']\n  };\n  if (resource[PREFIXES_KEY]) {\n    for (const path of resource[PREFIXES_KEY]) {\n      const pathWithoutTrailingSlash = path.replace(/\\/$/, '');\n      const reference = service.makeStorageReference(\n        new Location(bucket, pathWithoutTrailingSlash)\n      );\n      listResult.prefixes.push(reference);\n    }\n  }\n\n  if (resource[ITEMS_KEY]) {\n    for (const item of resource[ITEMS_KEY]) {\n      const reference = service.makeStorageReference(\n        new Location(bucket, item['name'])\n      );\n      listResult.items.push(reference);\n    }\n  }\n  return listResult;\n}\n\nexport function fromResponseString(\n  service: StorageService,\n  bucket: string,\n  resourceString: string\n): ListResult | null {\n  const obj = json.jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = (obj as unknown) as ListResultResponse;\n  return fromBackendResponse(service, bucket, resource);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { FirebaseStorageError } from './error';\nimport { Headers, XhrIo } from './xhrio';\n\nexport interface UrlParams {\n  [name: string]: string | number;\n}\n\nexport class RequestInfo<T> {\n  urlParams: UrlParams = {};\n  headers: Headers = {};\n  body: Blob | string | Uint8Array | null = null;\n\n  errorHandler:\n    | ((p1: XhrIo, p2: FirebaseStorageError) => FirebaseStorageError)\n    | null = null;\n\n  /**\n   * Called with the current number of bytes uploaded and total size (-1 if not\n   * computable) of the request body (i.e. used to report upload progress).\n   */\n  progressCallback: ((p1: number, p2: number) => void) | null = null;\n  successCodes: number[] = [200];\n  additionalRetryCodes: number[] = [];\n\n  constructor(\n    public url: string,\n    public method: string,\n    /**\n     * Returns the value with which to resolve the request's promise. Only called\n     * if the request is successful. Throw from this function to reject the\n     * returned Request's promise with the thrown error.\n     * Note: The XhrIo passed to this function may be reused after this callback\n     * returns. Do not keep a reference to it in any way.\n     */\n    public handler: (p1: XhrIo, p2: string) => T,\n    public timeout: number\n  ) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods for interacting with the network.\n */\n\nimport { Metadata } from '../metadata';\nimport { ListResult } from '../list';\nimport { FbsBlob } from './blob';\nimport {\n  FirebaseStorageError,\n  cannotSliceBlob,\n  unauthenticated,\n  quotaExceeded,\n  unauthorized,\n  objectNotFound,\n  serverFileWrongSize,\n  unknown\n} from './error';\nimport { Location } from './location';\nimport * as MetadataUtils from './metadata';\nimport * as ListResultUtils from './list';\nimport { RequestInfo, UrlParams } from './requestinfo';\nimport * as type from './type';\nimport * as UrlUtils from './url';\nimport { XhrIo } from './xhrio';\nimport { StorageService } from '../service';\n\n/**\n * Throws the UNKNOWN FirebaseStorageError if cndn is false.\n */\nexport function handlerCheck(cndn: boolean): void {\n  if (!cndn) {\n    throw unknown();\n  }\n}\n\nexport function metadataHandler(\n  service: StorageService,\n  mappings: MetadataUtils.Mappings\n): (p1: XhrIo, p2: string) => Metadata {\n  function handler(xhr: XhrIo, text: string): Metadata {\n    const metadata = MetadataUtils.fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return metadata as Metadata;\n  }\n  return handler;\n}\n\nexport function listHandler(\n  service: StorageService,\n  bucket: string\n): (p1: XhrIo, p2: string) => ListResult {\n  function handler(xhr: XhrIo, text: string): ListResult {\n    const listResult = ListResultUtils.fromResponseString(\n      service,\n      bucket,\n      text\n    );\n    handlerCheck(listResult !== null);\n    return listResult as ListResult;\n  }\n  return handler;\n}\n\nexport function downloadUrlHandler(\n  service: StorageService,\n  mappings: MetadataUtils.Mappings\n): (p1: XhrIo, p2: string) => string | null {\n  function handler(xhr: XhrIo, text: string): string | null {\n    const metadata = MetadataUtils.fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return MetadataUtils.downloadUrlFromResourceString(\n      metadata as Metadata,\n      text\n    );\n  }\n  return handler;\n}\n\nexport function sharedErrorHandler(\n  location: Location\n): (p1: XhrIo, p2: FirebaseStorageError) => FirebaseStorageError {\n  function errorHandler(\n    xhr: XhrIo,\n    err: FirebaseStorageError\n  ): FirebaseStorageError {\n    let newErr;\n    if (xhr.getStatus() === 401) {\n      newErr = unauthenticated();\n    } else {\n      if (xhr.getStatus() === 402) {\n        newErr = quotaExceeded(location.bucket);\n      } else {\n        if (xhr.getStatus() === 403) {\n          newErr = unauthorized(location.path);\n        } else {\n          newErr = err;\n        }\n      }\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function objectErrorHandler(\n  location: Location\n): (p1: XhrIo, p2: FirebaseStorageError) => FirebaseStorageError {\n  const shared = sharedErrorHandler(location);\n\n  function errorHandler(\n    xhr: XhrIo,\n    err: FirebaseStorageError\n  ): FirebaseStorageError {\n    let newErr = shared(xhr, err);\n    if (xhr.getStatus() === 404) {\n      newErr = objectNotFound(location.path);\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function getMetadata(\n  service: StorageService,\n  location: Location,\n  mappings: MetadataUtils.Mappings\n): RequestInfo<Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = UrlUtils.makeUrl(urlPart);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function list(\n  service: StorageService,\n  location: Location,\n  delimiter?: string,\n  pageToken?: string | null,\n  maxResults?: number | null\n): RequestInfo<ListResult> {\n  const urlParams: UrlParams = {};\n  if (location.isRoot) {\n    urlParams['prefix'] = '';\n  } else {\n    urlParams['prefix'] = location.path + '/';\n  }\n  if (delimiter && delimiter.length > 0) {\n    urlParams['delimiter'] = delimiter;\n  }\n  if (pageToken) {\n    urlParams['pageToken'] = pageToken;\n  }\n  if (maxResults) {\n    urlParams['maxResults'] = maxResults;\n  }\n  const urlPart = location.bucketOnlyServerUrl();\n  const url = UrlUtils.makeUrl(urlPart);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    listHandler(service, location.bucket),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\nexport function getDownloadUrl(\n  service: StorageService,\n  location: Location,\n  mappings: MetadataUtils.Mappings\n): RequestInfo<string | null> {\n  const urlPart = location.fullServerUrl();\n  const url = UrlUtils.makeUrl(urlPart);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    downloadUrlHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function updateMetadata(\n  service: StorageService,\n  location: Location,\n  metadata: Metadata,\n  mappings: MetadataUtils.Mappings\n): RequestInfo<Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = UrlUtils.makeUrl(urlPart);\n  const method = 'PATCH';\n  const body = MetadataUtils.toResourceString(metadata, mappings);\n  const headers = { 'Content-Type': 'application/json; charset=utf-8' };\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function deleteObject(\n  service: StorageService,\n  location: Location\n): RequestInfo<void> {\n  const urlPart = location.fullServerUrl();\n  const url = UrlUtils.makeUrl(urlPart);\n  const method = 'DELETE';\n  const timeout = service.maxOperationRetryTime;\n\n  function handler(_xhr: XhrIo, _text: string): void {}\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.successCodes = [200, 204];\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function determineContentType_(\n  metadata: Metadata | null,\n  blob: FbsBlob | null\n): string {\n  return (\n    (metadata && metadata['contentType']) ||\n    (blob && blob.type()) ||\n    'application/octet-stream'\n  );\n}\n\nexport function metadataForUpload_(\n  location: Location,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): Metadata {\n  const metadataClone = Object.assign({}, metadata);\n  metadataClone['fullPath'] = location.path;\n  metadataClone['size'] = blob.size();\n  if (!metadataClone['contentType']) {\n    metadataClone['contentType'] = determineContentType_(null, blob);\n  }\n  return metadataClone;\n}\n\nexport function multipartUpload(\n  service: StorageService,\n  location: Location,\n  mappings: MetadataUtils.Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<Metadata> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const headers: { [prop: string]: string } = {\n    'X-Goog-Upload-Protocol': 'multipart'\n  };\n\n  function genBoundary(): string {\n    let str = '';\n    for (let i = 0; i < 2; i++) {\n      str = str + Math.random().toString().slice(2);\n    }\n    return str;\n  }\n  const boundary = genBoundary();\n  headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n  const metadata_ = metadataForUpload_(location, blob, metadata);\n  const metadataString = MetadataUtils.toResourceString(metadata_, mappings);\n  const preBlobPart =\n    '--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' +\n    metadataString +\n    '\\r\\n--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: ' +\n    metadata_['contentType'] +\n    '\\r\\n\\r\\n';\n  const postBlobPart = '\\r\\n--' + boundary + '--';\n  const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n  const urlParams: UrlParams = { name: metadata_['fullPath']! };\n  const url = UrlUtils.makeUrl(urlPart);\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param current The number of bytes that have been uploaded so far.\n * @param total The total number of bytes in the upload.\n * @param opt_finalized True if the server has finished the upload.\n * @param opt_metadata The upload metadata, should\n *     only be passed if opt_finalized is true.\n */\nexport class ResumableUploadStatus {\n  finalized: boolean;\n  metadata: Metadata | null;\n\n  constructor(\n    public current: number,\n    public total: number,\n    finalized?: boolean,\n    metadata?: Metadata | null\n  ) {\n    this.finalized = !!finalized;\n    this.metadata = metadata || null;\n  }\n}\n\nexport function checkResumeHeader_(xhr: XhrIo, allowed?: string[]): string {\n  let status: string | null = null;\n  try {\n    status = xhr.getResponseHeader('X-Goog-Upload-Status');\n  } catch (e) {\n    handlerCheck(false);\n  }\n  const allowedStatus = allowed || ['active'];\n  handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\n  return status as string;\n}\n\nexport function createResumableUpload(\n  service: StorageService,\n  location: Location,\n  mappings: MetadataUtils.Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<string> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const metadataForUpload = metadataForUpload_(location, blob, metadata);\n  const urlParams: UrlParams = { name: metadataForUpload['fullPath']! };\n  const url = UrlUtils.makeUrl(urlPart);\n  const method = 'POST';\n  const headers = {\n    'X-Goog-Upload-Protocol': 'resumable',\n    'X-Goog-Upload-Command': 'start',\n    'X-Goog-Upload-Header-Content-Length': blob.size(),\n    'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType']!,\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  const body = MetadataUtils.toResourceString(metadataForUpload, mappings);\n  const timeout = service.maxUploadRetryTime;\n\n  function handler(xhr: XhrIo): string {\n    checkResumeHeader_(xhr);\n    let url;\n    try {\n      url = xhr.getResponseHeader('X-Goog-Upload-URL');\n    } catch (e) {\n      handlerCheck(false);\n    }\n    handlerCheck(type.isString(url));\n    return url as string;\n  }\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n */\nexport function getResumableUploadStatus(\n  service: StorageService,\n  location: Location,\n  url: string,\n  blob: FbsBlob\n): RequestInfo<ResumableUploadStatus> {\n  const headers = { 'X-Goog-Upload-Command': 'query' };\n\n  function handler(xhr: XhrIo): ResumableUploadStatus {\n    const status = checkResumeHeader_(xhr, ['active', 'final']);\n    let sizeString: string | null = null;\n    try {\n      sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n    } catch (e) {\n      handlerCheck(false);\n    }\n\n    if (!sizeString) {\n      // null or empty string\n      handlerCheck(false);\n    }\n\n    const size = Number(sizeString);\n    handlerCheck(!isNaN(size));\n    return new ResumableUploadStatus(size, blob.size(), status === 'final');\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * Any uploads via the resumable upload API must transfer a number of bytes\n * that is a multiple of this number.\n */\nexport const resumableUploadChunkSize: number = 256 * 1024;\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n * @param chunkSize Number of bytes to upload.\n * @param status The previous status.\n *     If not passed or null, we start from the beginning.\n * @throws fbs.Error If the upload is already complete, the passed in status\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\n *     for upload.\n */\nexport function continueResumableUpload(\n  location: Location,\n  service: StorageService,\n  url: string,\n  blob: FbsBlob,\n  chunkSize: number,\n  mappings: MetadataUtils.Mappings,\n  status?: ResumableUploadStatus | null,\n  progressCallback?: ((p1: number, p2: number) => void) | null\n): RequestInfo<ResumableUploadStatus> {\n  // TODO(andysoto): standardize on internal asserts\n  // assert(!(opt_status && opt_status.finalized));\n  const status_ = new ResumableUploadStatus(0, 0);\n  if (status) {\n    status_.current = status.current;\n    status_.total = status.total;\n  } else {\n    status_.current = 0;\n    status_.total = blob.size();\n  }\n  if (blob.size() !== status_.total) {\n    throw serverFileWrongSize();\n  }\n  const bytesLeft = status_.total - status_.current;\n  let bytesToUpload = bytesLeft;\n  if (chunkSize > 0) {\n    bytesToUpload = Math.min(bytesToUpload, chunkSize);\n  }\n  const startByte = status_.current;\n  const endByte = startByte + bytesToUpload;\n  const uploadCommand =\n    bytesToUpload === bytesLeft ? 'upload, finalize' : 'upload';\n  const headers = {\n    'X-Goog-Upload-Command': uploadCommand,\n    'X-Goog-Upload-Offset': status_.current\n  };\n  const body = blob.slice(startByte, endByte);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n\n  function handler(xhr: XhrIo, text: string): ResumableUploadStatus {\n    // TODO(andysoto): Verify the MD5 of each uploaded range:\n    // the 'x-range-md5' header comes back with status code 308 responses.\n    // We'll only be able to bail out though, because you can't re-upload a\n    // range that you previously uploaded.\n    const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n    const newCurrent = status_.current + bytesToUpload;\n    const size = blob.size();\n    let metadata;\n    if (uploadStatus === 'final') {\n      metadata = metadataHandler(service, mappings)(xhr, text);\n    } else {\n      metadata = null;\n    }\n    return new ResumableUploadStatus(\n      newCurrent,\n      size,\n      uploadStatus === 'final',\n      metadata\n    );\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.progressCallback = progressCallback || null;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as type from './type';\nimport { FirebaseStorageError } from './error';\n\nexport type NextFn<T> = (value: T) => void;\nexport type ErrorFn = (error: FirebaseStorageError) => void;\nexport type CompleteFn = () => void;\nexport type Unsubscribe = () => void;\n\nexport interface StorageObserver<T> {\n  next?: NextFn<T>;\n  error?: ErrorFn;\n  complete?: CompleteFn;\n}\n\nexport type Subscribe<T> = (\n  next?: NextFn<T> | StorageObserver<T>,\n  error?: ErrorFn,\n  complete?: CompleteFn\n) => Unsubscribe;\n\nexport class Observer<T> implements StorageObserver<T> {\n  next?: NextFn<T>;\n  error?: ErrorFn;\n  complete?: CompleteFn;\n\n  constructor(\n    nextOrObserver?: NextFn<T> | StorageObserver<T>,\n    error?: ErrorFn,\n    complete?: CompleteFn\n  ) {\n    const asFunctions =\n      type.isFunction(nextOrObserver) || error != null || complete != null;\n    if (asFunctions) {\n      this.next = nextOrObserver as NextFn<T>;\n      this.error = error;\n      this.complete = complete;\n    } else {\n      const observer = nextOrObserver as {\n        next?: NextFn<T>;\n        error?: ErrorFn;\n        complete?: CompleteFn;\n      };\n      this.next = observer.next;\n      this.error = observer.error;\n      this.complete = observer.complete;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { TaskState } from './implementation/taskenums';\nimport { Metadata } from './metadata';\nimport { Reference } from './reference';\nimport { UploadTask } from './task';\n\nexport class UploadTaskSnapshot {\n  constructor(\n    readonly bytesTransferred: number,\n    readonly totalBytes: number,\n    readonly state: TaskState,\n    readonly metadata: Metadata,\n    readonly task: UploadTask,\n    readonly ref: Reference\n  ) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a function that invokes f with its arguments asynchronously as a\n * microtask, i.e. as soon as possible after the current script returns back\n * into browser code.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function async(f: Function): Function {\n  return (...argsToForward: unknown[]) => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.resolve().then(() => f(...argsToForward));\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Defines types for interacting with blob transfer tasks.\n */\n\nimport { FbsBlob } from './implementation/blob';\nimport { canceled, Code, FirebaseStorageError } from './implementation/error';\nimport {\n  InternalTaskState,\n  TaskEvent,\n  TaskState,\n  taskStateFromInternalTaskState\n} from './implementation/taskenums';\nimport { Metadata } from './metadata';\nimport {\n  CompleteFn,\n  ErrorFn,\n  Observer,\n  StorageObserver,\n  Subscribe,\n  Unsubscribe\n} from './implementation/observer';\nimport { Request } from './implementation/request';\nimport { UploadTaskSnapshot } from './tasksnapshot';\nimport { async as fbsAsync } from './implementation/async';\nimport * as fbsMetadata from './implementation/metadata';\nimport * as fbsRequests from './implementation/requests';\nimport { Reference } from './reference';\nimport { getMappings } from './implementation/metadata';\n\n/**\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\n * upload and manage callbacks for various events.\n */\nexport class UploadTask {\n  private _ref: Reference;\n  /**\n   * @internal\n   */\n  _blob: FbsBlob;\n  /**\n   * @internal\n   */\n  _metadata: Metadata | null;\n  private _mappings: fbsMetadata.Mappings;\n  /**\n   * @internal\n   */\n  _transferred: number = 0;\n  private _needToFetchStatus: boolean = false;\n  private _needToFetchMetadata: boolean = false;\n  private _observers: Array<StorageObserver<UploadTaskSnapshot>> = [];\n  private _resumable: boolean;\n  /**\n   * @internal\n   */\n  _state: InternalTaskState;\n  private _error?: FirebaseStorageError = undefined;\n  private _uploadUrl?: string = undefined;\n  private _request?: Request<unknown> = undefined;\n  private _chunkMultiplier: number = 1;\n  private _errorHandler: (p1: FirebaseStorageError) => void;\n  private _metadataErrorHandler: (p1: FirebaseStorageError) => void;\n  private _resolve?: (p1: UploadTaskSnapshot) => void = undefined;\n  private _reject?: (p1: FirebaseStorageError) => void = undefined;\n  private _promise: Promise<UploadTaskSnapshot>;\n\n  /**\n   * @param ref - The firebaseStorage.Reference object this task came\n   *     from, untyped to avoid cyclic dependencies.\n   * @param blob - The blob to upload.\n   */\n  constructor(ref: Reference, blob: FbsBlob, metadata: Metadata | null = null) {\n    this._ref = ref;\n    this._blob = blob;\n    this._metadata = metadata;\n    this._mappings = getMappings();\n    this._resumable = this._shouldDoResumable(this._blob);\n    this._state = InternalTaskState.RUNNING;\n    this._errorHandler = error => {\n      this._request = undefined;\n      this._chunkMultiplier = 1;\n      if (error.codeEquals(Code.CANCELED)) {\n        this._needToFetchStatus = true;\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n        this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this._metadataErrorHandler = error => {\n      this._request = undefined;\n      if (error.codeEquals(Code.CANCELED)) {\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n        this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this._promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n      this._start();\n    });\n\n    // Prevent uncaught rejections on the internal promise from bubbling out\n    // to the top level with a dummy handler.\n    this._promise.then(null, () => {});\n  }\n\n  private _makeProgressCallback(): (p1: number, p2: number) => void {\n    const sizeBefore = this._transferred;\n    return loaded => this._updateProgress(sizeBefore + loaded);\n  }\n\n  private _shouldDoResumable(blob: FbsBlob): boolean {\n    return blob.size() > 256 * 1024;\n  }\n\n  private _start(): void {\n    if (this._state !== InternalTaskState.RUNNING) {\n      // This can happen if someone pauses us in a resume callback, for example.\n      return;\n    }\n    if (this._request !== undefined) {\n      return;\n    }\n    if (this._resumable) {\n      if (this._uploadUrl === undefined) {\n        this._createResumable();\n      } else {\n        if (this._needToFetchStatus) {\n          this._fetchStatus();\n        } else {\n          if (this._needToFetchMetadata) {\n            // Happens if we miss the metadata on upload completion.\n            this._fetchMetadata();\n          } else {\n            this._continueUpload();\n          }\n        }\n      }\n    } else {\n      this._oneShotUpload();\n    }\n  }\n\n  private _resolveToken(callback: (p1: string | null) => void): void {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this._ref.storage.getAuthToken().then(authToken => {\n      switch (this._state) {\n        case InternalTaskState.RUNNING:\n          callback(authToken);\n          break;\n        case InternalTaskState.CANCELING:\n          this._transition(InternalTaskState.CANCELED);\n          break;\n        case InternalTaskState.PAUSING:\n          this._transition(InternalTaskState.PAUSED);\n          break;\n        default:\n      }\n    });\n  }\n\n  // TODO(andysoto): assert false\n\n  private _createResumable(): void {\n    this._resolveToken(authToken => {\n      const requestInfo = fbsRequests.createResumableUpload(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings,\n        this._blob,\n        this._metadata\n      );\n      const createRequest = this._ref.storage.makeRequest(\n        requestInfo,\n        authToken\n      );\n      this._request = createRequest;\n      createRequest.getPromise().then((url: string) => {\n        this._request = undefined;\n        this._uploadUrl = url;\n        this._needToFetchStatus = false;\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  private _fetchStatus(): void {\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl as string;\n    this._resolveToken(authToken => {\n      const requestInfo = fbsRequests.getResumableUploadStatus(\n        this._ref.storage,\n        this._ref._location,\n        url,\n        this._blob\n      );\n      const statusRequest = this._ref.storage.makeRequest(\n        requestInfo,\n        authToken\n      );\n      this._request = statusRequest;\n      statusRequest.getPromise().then(status => {\n        status = status as fbsRequests.ResumableUploadStatus;\n        this._request = undefined;\n        this._updateProgress(status.current);\n        this._needToFetchStatus = false;\n        if (status.finalized) {\n          this._needToFetchMetadata = true;\n        }\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  private _continueUpload(): void {\n    const chunkSize =\n      fbsRequests.resumableUploadChunkSize * this._chunkMultiplier;\n    const status = new fbsRequests.ResumableUploadStatus(\n      this._transferred,\n      this._blob.size()\n    );\n\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl as string;\n    this._resolveToken(authToken => {\n      let requestInfo;\n      try {\n        requestInfo = fbsRequests.continueResumableUpload(\n          this._ref._location,\n          this._ref.storage,\n          url,\n          this._blob,\n          chunkSize,\n          this._mappings,\n          status,\n          this._makeProgressCallback()\n        );\n      } catch (e) {\n        this._error = e;\n        this._transition(InternalTaskState.ERROR);\n        return;\n      }\n      const uploadRequest = this._ref.storage.makeRequest(\n        requestInfo,\n        authToken\n      );\n      this._request = uploadRequest;\n      uploadRequest\n        .getPromise()\n        .then((newStatus: fbsRequests.ResumableUploadStatus) => {\n          this._increaseMultiplier();\n          this._request = undefined;\n          this._updateProgress(newStatus.current);\n          if (newStatus.finalized) {\n            this._metadata = newStatus.metadata;\n            this._transition(InternalTaskState.SUCCESS);\n          } else {\n            this.completeTransitions_();\n          }\n        }, this._errorHandler);\n    });\n  }\n\n  private _increaseMultiplier(): void {\n    const currentSize =\n      fbsRequests.resumableUploadChunkSize * this._chunkMultiplier;\n\n    // Max chunk size is 32M.\n    if (currentSize < 32 * 1024 * 1024) {\n      this._chunkMultiplier *= 2;\n    }\n  }\n\n  private _fetchMetadata(): void {\n    this._resolveToken(authToken => {\n      const requestInfo = fbsRequests.getMetadata(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings\n      );\n      const metadataRequest = this._ref.storage.makeRequest(\n        requestInfo,\n        authToken\n      );\n      this._request = metadataRequest;\n      metadataRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._transition(InternalTaskState.SUCCESS);\n      }, this._metadataErrorHandler);\n    });\n  }\n\n  private _oneShotUpload(): void {\n    this._resolveToken(authToken => {\n      const requestInfo = fbsRequests.multipartUpload(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings,\n        this._blob,\n        this._metadata\n      );\n      const multipartRequest = this._ref.storage.makeRequest(\n        requestInfo,\n        authToken\n      );\n      this._request = multipartRequest;\n      multipartRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._updateProgress(this._blob.size());\n        this._transition(InternalTaskState.SUCCESS);\n      }, this._errorHandler);\n    });\n  }\n\n  private _updateProgress(transferred: number): void {\n    const old = this._transferred;\n    this._transferred = transferred;\n\n    // A progress update can make the \"transferred\" value smaller (e.g. a\n    // partial upload not completed by server, after which the \"transferred\"\n    // value may reset to the value at the beginning of the request).\n    if (this._transferred !== old) {\n      this._notifyObservers();\n    }\n  }\n\n  private _transition(state: InternalTaskState): void {\n    if (this._state === state) {\n      return;\n    }\n    switch (state) {\n      case InternalTaskState.CANCELING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n        break;\n      case InternalTaskState.PAUSING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n        break;\n      case InternalTaskState.RUNNING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        const wasPaused = this._state === InternalTaskState.PAUSED;\n        this._state = state;\n        if (wasPaused) {\n          this._notifyObservers();\n          this._start();\n        }\n        break;\n      case InternalTaskState.PAUSED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.CANCELED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._error = canceled();\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.ERROR:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.SUCCESS:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      default: // Ignore\n    }\n  }\n\n  private completeTransitions_(): void {\n    switch (this._state) {\n      case InternalTaskState.PAUSING:\n        this._transition(InternalTaskState.PAUSED);\n        break;\n      case InternalTaskState.CANCELING:\n        this._transition(InternalTaskState.CANCELED);\n        break;\n      case InternalTaskState.RUNNING:\n        this._start();\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        break;\n    }\n  }\n\n  get snapshot(): UploadTaskSnapshot {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    return new UploadTaskSnapshot(\n      this._transferred,\n      this._blob.size(),\n      externalState,\n      this._metadata!,\n      this,\n      this._ref\n    );\n  }\n\n  /**\n   * Adds a callback for an event.\n   * @param type - The type of event to listen for.\n   */\n  on(\n    type: TaskEvent,\n    nextOrObserver?:\n      | StorageObserver<UploadTaskSnapshot>\n      | ((a: UploadTaskSnapshot) => unknown),\n    error?: ErrorFn,\n    completed?: CompleteFn\n  ): Unsubscribe | Subscribe<UploadTaskSnapshot> {\n    const observer = new Observer(nextOrObserver, error, completed);\n    this._addObserver(observer);\n    return () => {\n      this._removeObserver(observer);\n    };\n  }\n\n  /**\n   * This object behaves like a Promise, and resolves with its snapshot data\n   * when the upload completes.\n   * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\n   * @param onRejected - The rejection callback.\n   */\n  then<U>(\n    onFulfilled?: ((value: UploadTaskSnapshot) => U | Promise<U>) | null,\n    onRejected?: ((error: FirebaseStorageError) => U | Promise<U>) | null\n  ): Promise<U> {\n    // These casts are needed so that TypeScript can infer the types of the\n    // resulting Promise.\n    return this._promise.then<U>(\n      onFulfilled as (value: UploadTaskSnapshot) => U | Promise<U>,\n      onRejected as ((error: unknown) => Promise<never>) | null\n    );\n  }\n\n  /**\n   * Equivalent to calling `then(null, onRejected)`.\n   */\n  catch<T>(\n    onRejected: (p1: FirebaseStorageError) => T | Promise<T>\n  ): Promise<T> {\n    return this.then(null, onRejected);\n  }\n\n  /**\n   * Adds the given observer.\n   */\n  private _addObserver(observer: Observer<UploadTaskSnapshot>): void {\n    this._observers.push(observer);\n    this._notifyObserver(observer);\n  }\n\n  /**\n   * Removes the given observer.\n   */\n  private _removeObserver(observer: Observer<UploadTaskSnapshot>): void {\n    const i = this._observers.indexOf(observer);\n    if (i !== -1) {\n      this._observers.splice(i, 1);\n    }\n  }\n\n  private _notifyObservers(): void {\n    this._finishPromise();\n    const observers = this._observers.slice();\n    observers.forEach(observer => {\n      this._notifyObserver(observer);\n    });\n  }\n\n  private _finishPromise(): void {\n    if (this._resolve !== undefined) {\n      let triggered = true;\n      switch (taskStateFromInternalTaskState(this._state)) {\n        case TaskState.SUCCESS:\n          fbsAsync(this._resolve.bind(null, this.snapshot))();\n          break;\n        case TaskState.CANCELED:\n        case TaskState.ERROR:\n          const toCall = this._reject as (p1: FirebaseStorageError) => void;\n          fbsAsync(toCall.bind(null, this._error as FirebaseStorageError))();\n          break;\n        default:\n          triggered = false;\n          break;\n      }\n      if (triggered) {\n        this._resolve = undefined;\n        this._reject = undefined;\n      }\n    }\n  }\n\n  private _notifyObserver(observer: Observer<UploadTaskSnapshot>): void {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    switch (externalState) {\n      case TaskState.RUNNING:\n      case TaskState.PAUSED:\n        if (observer.next) {\n          fbsAsync(observer.next.bind(observer, this.snapshot))();\n        }\n        break;\n      case TaskState.SUCCESS:\n        if (observer.complete) {\n          fbsAsync(observer.complete.bind(observer))();\n        }\n        break;\n      case TaskState.CANCELED:\n      case TaskState.ERROR:\n        if (observer.error) {\n          fbsAsync(\n            observer.error.bind(observer, this._error as FirebaseStorageError)\n          )();\n        }\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        if (observer.error) {\n          fbsAsync(\n            observer.error.bind(observer, this._error as FirebaseStorageError)\n          )();\n        }\n    }\n  }\n\n  /**\n   * Resumes a paused task. Has no effect on a currently running or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  resume(): boolean {\n    const valid =\n      this._state === InternalTaskState.PAUSED ||\n      this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.RUNNING);\n    }\n    return valid;\n  }\n\n  /**\n   * Pauses a currently running task. Has no effect on a paused or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  pause(): boolean {\n    const valid = this._state === InternalTaskState.RUNNING;\n    if (valid) {\n      this._transition(InternalTaskState.PAUSING);\n    }\n    return valid;\n  }\n\n  /**\n   * Cancels a currently running or paused task. Has no effect on a complete or\n   * failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  cancel(): boolean {\n    const valid =\n      this._state === InternalTaskState.RUNNING ||\n      this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.CANCELING);\n    }\n    return valid;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines the Firebase Storage Reference class.\n */\n\nimport { FbsBlob } from './implementation/blob';\nimport { Location } from './implementation/location';\nimport { getMappings } from './implementation/metadata';\nimport { child, parent, lastComponent } from './implementation/path';\nimport {\n  list as requestsList,\n  getMetadata as requestsGetMetadata,\n  updateMetadata as requestsUpdateMetadata,\n  getDownloadUrl as requestsGetDownloadUrl,\n  deleteObject as requestsDeleteObject\n} from './implementation/requests';\nimport { StringFormat, dataFromString } from './implementation/string';\nimport { Metadata } from './metadata';\nimport { StorageService } from './service';\nimport { ListOptions, ListResult } from './list';\nimport { UploadTask } from './task';\nimport { invalidRootOperation, noDownloadURL } from './implementation/error';\nimport { validateNumber } from './implementation/type';\n\n/**\n * Provides methods to interact with a bucket in the Firebase Storage service.\n * @param location - An fbs.location, or the URL at\n *     which to base this object, in one of the following forms:\n *         gs://<bucket>/<object-path>\n *         http[s]://firebasestorage.googleapis.com/\n *                     <api-version>/b/<bucket>/o/<object-path>\n *     Any query or fragment strings will be ignored in the http[s]\n *     format. If no value is passed, the storage object will use a URL based on\n *     the project ID of the base firebase.App instance.\n */\nexport class Reference {\n  /**\n   * @internal\n   */\n  _location: Location;\n\n  constructor(private _service: StorageService, location: string | Location) {\n    if (location instanceof Location) {\n      this._location = location;\n    } else {\n      this._location = Location.makeFromUrl(location);\n    }\n  }\n\n  /**\n   * @returns The URL for the bucket and path this object references,\n   *     in the form gs://<bucket>/<object-path>\n   * @override\n   */\n  toString(): string {\n    return 'gs://' + this._location.bucket + '/' + this._location.path;\n  }\n\n  protected newRef(service: StorageService, location: Location): Reference {\n    return new Reference(service, location);\n  }\n\n  /**\n   * @returns An reference to the root of this\n   *     object's bucket.\n   */\n  get root(): Reference {\n    const location = new Location(this._location.bucket, '');\n    return this.newRef(this._service, location);\n  }\n\n  get bucket(): string {\n    return this._location.bucket;\n  }\n\n  get fullPath(): string {\n    return this._location.path;\n  }\n\n  get name(): string {\n    return lastComponent(this._location.path);\n  }\n\n  get storage(): StorageService {\n    return this._service;\n  }\n\n  get parent(): Reference | null {\n    const newPath = parent(this._location.path);\n    if (newPath === null) {\n      return null;\n    }\n    const location = new Location(this._location.bucket, newPath);\n    return new Reference(this._service, location);\n  }\n\n  _throwIfRoot(name: string): void {\n    if (this._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  }\n}\n\n/**\n * Uploads a blob to this object's location.\n * @public\n * @param ref - Storage Reference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded string.\n * @returns An UploadTask that lets you control and\n *     observe the upload.\n */\nexport function uploadBytesResumable(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata: Metadata | null = null\n): UploadTask {\n  ref._throwIfRoot('uploadBytesResumable');\n  return new UploadTask(ref, new FbsBlob(data), metadata);\n}\n\n/**\n * Uploads a string to this object's location.\n * @public\n * @param ref - Storage Reference where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the newly uploaded object.\n * @returns An UploadTask that lets you control and\n *     observe the upload.\n */\nexport function uploadString(\n  ref: Reference,\n  value: string,\n  format: StringFormat = StringFormat.RAW,\n  metadata?: Metadata\n): UploadTask {\n  ref._throwIfRoot('putString');\n  const data = dataFromString(format, value);\n  const metadataClone = { ...metadata } as Metadata;\n  if (metadataClone['contentType'] == null && data.contentType != null) {\n    metadataClone['contentType'] = data.contentType!;\n  }\n  return new UploadTask(ref, new FbsBlob(data.data, true), metadataClone);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: listAll may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - Storage Reference to get list from.\n *\n * @returns A Promise that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: Reference): Promise<ListResult> {\n  const accumulator: ListResult = {\n    prefixes: [],\n    items: []\n  };\n  return listAllHelper(ref, accumulator).then(() => accumulator);\n}\n\n/**\n * Separated from listAll because async functions can't use \"arguments\".\n * @internal\n * @param ref\n * @param accumulator\n * @param pageToken\n */\nasync function listAllHelper(\n  ref: Reference,\n  accumulator: ListResult,\n  pageToken?: string\n): Promise<void> {\n  const opt: ListOptions = {\n    // maxResults is 1000 by default.\n    pageToken\n  };\n  const nextPage = await list(ref, opt);\n  accumulator.prefixes.push(...nextPage.prefixes);\n  accumulator.items.push(...nextPage.items);\n  if (nextPage.nextPageToken != null) {\n    await listAllHelper(ref, accumulator, nextPage.nextPageToken);\n  }\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - Storage Reference to get list from.\n * @param options - See ListOptions for details.\n * @returns A Promise that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport async function list(\n  ref: Reference,\n  options?: ListOptions | null\n): Promise<ListResult> {\n  if (options != null) {\n    if (typeof options.maxResults === 'number') {\n      validateNumber(\n        'options.maxResults',\n        /* minValue= */ 1,\n        /* maxValue= */ 1000,\n        options.maxResults\n      );\n    }\n  }\n  const authToken = await ref.storage.getAuthToken();\n  const op = options || {};\n  const requestInfo = requestsList(\n    ref.storage,\n    ref._location,\n    /*delimiter= */ '/',\n    op.pageToken,\n    op.maxResults\n  );\n  return ref.storage.makeRequest(requestInfo, authToken).getPromise();\n}\n\n/**\n * A promise that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - Storage Reference to get metadata from.\n */\nexport async function getMetadata(ref: Reference): Promise<Metadata> {\n  ref._throwIfRoot('getMetadata');\n  const authToken = await ref.storage.getAuthToken();\n  const requestInfo = requestsGetMetadata(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return ref.storage.makeRequest(requestInfo, authToken).getPromise();\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - Storage Reference to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A promise that resolves\n *     with the new metadata for this object.\n *     See `firebaseStorage.Reference.prototype.getMetadata`\n */\nexport async function updateMetadata(\n  ref: Reference,\n  metadata: Metadata\n): Promise<Metadata> {\n  ref._throwIfRoot('updateMetadata');\n  const authToken = await ref.storage.getAuthToken();\n  const requestInfo = requestsUpdateMetadata(\n    ref.storage,\n    ref._location,\n    metadata,\n    getMappings()\n  );\n  return ref.storage.makeRequest(requestInfo, authToken).getPromise();\n}\n\n/**\n * Returns the download URL for the given Reference.\n * @public\n * @returns A promise that resolves with the download\n *     URL for this object.\n */\nexport async function getDownloadURL(ref: Reference): Promise<string> {\n  ref._throwIfRoot('getDownloadURL');\n  const authToken = await ref.storage.getAuthToken();\n  const requestInfo = requestsGetDownloadUrl(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return ref.storage\n    .makeRequest(requestInfo, authToken)\n    .getPromise()\n    .then(url => {\n      if (url === null) {\n        throw noDownloadURL();\n      }\n      return url;\n    });\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - Storage Reference for object to delete.\n * @returns A promise that resolves if the deletion succeeds.\n */\nexport async function deleteObject(ref: Reference): Promise<void> {\n  ref._throwIfRoot('deleteObject');\n  const authToken = await ref.storage.getAuthToken();\n  const requestInfo = requestsDeleteObject(ref.storage, ref._location);\n  return ref.storage.makeRequest(requestInfo, authToken).getPromise();\n}\n\n/**\n * Returns reference for object obtained by appending `childPath` to `ref`.\n * @internal\n *\n * @param ref - Storage Reference to get child of.\n * @param childPath - Child path from provided ref.\n * @returns A reference to the object obtained by\n * appending childPath, removing any duplicate, beginning, or trailing\n * slashes.\n */\nexport function getChild(ref: Reference, childPath: string): Reference {\n  const newPath = child(ref._location.path, childPath);\n  const location = new Location(ref._location.bucket, newPath);\n  return new Reference(ref.storage, location);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as types from '@firebase/storage-types';\nimport { ReferenceCompat } from './reference';\nimport { UploadTaskCompat } from './task';\nimport { UploadTaskSnapshot } from '../src/tasksnapshot';\nimport { Metadata } from '../src/metadata';\n\nexport class UploadTaskSnapshotCompat implements types.UploadTaskSnapshot {\n  constructor(\n    readonly _delegate: UploadTaskSnapshot,\n    readonly task: UploadTaskCompat,\n    readonly ref: ReferenceCompat\n  ) {}\n\n  get bytesTransferred(): number {\n    return this._delegate.bytesTransferred;\n  }\n  get metadata(): Metadata {\n    return this._delegate.metadata;\n  }\n  get state(): string {\n    return this._delegate.state;\n  }\n  get totalBytes(): number {\n    return this._delegate.totalBytes;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UploadTask } from '../src/task';\nimport { UploadTaskSnapshotCompat } from './tasksnapshot';\nimport { TaskEvent } from '../src/implementation/taskenums';\nimport * as types from '@firebase/storage-types';\nimport {\n  StorageObserver,\n  ErrorFn,\n  CompleteFn,\n  Subscribe,\n  Unsubscribe\n} from '../src/implementation/observer';\nimport { UploadTaskSnapshot } from '../src/tasksnapshot';\nimport { ReferenceCompat } from './reference';\nimport { FirebaseStorageError } from '../src/implementation/error';\n\nexport class UploadTaskCompat implements types.UploadTask {\n  private readonly _snapshot: UploadTaskSnapshotCompat;\n  constructor(\n    private readonly _delegate: UploadTask,\n    private readonly _ref: ReferenceCompat\n  ) {\n    this._snapshot = new UploadTaskSnapshotCompat(\n      this._delegate.snapshot,\n      this,\n      this._ref\n    );\n  }\n\n  get snapshot(): UploadTaskSnapshotCompat {\n    return this._snapshot;\n  }\n\n  cancel = this._delegate.cancel.bind(this._delegate);\n  catch = this._delegate.catch.bind(this._delegate);\n  pause = this._delegate.pause.bind(this._delegate);\n  resume = this._delegate.resume.bind(this._delegate);\n\n  then(\n    onFulfilled?: ((a: UploadTaskSnapshotCompat) => unknown) | null,\n    onRejected?: ((a: FirebaseStorageError) => unknown) | null\n  ): Promise<unknown> {\n    return this._delegate.then(snapshot => {\n      if (onFulfilled) {\n        return onFulfilled(\n          new UploadTaskSnapshotCompat(snapshot, this, this._ref)\n        );\n      }\n    }, onRejected);\n  }\n\n  on(\n    type: TaskEvent,\n    nextOrObserver?:\n      | types.StorageObserver<UploadTaskSnapshotCompat>\n      | null\n      | ((a: UploadTaskSnapshotCompat) => unknown),\n    error?: ErrorFn | null,\n    completed?: CompleteFn | null\n  ): Unsubscribe | Subscribe<UploadTaskSnapshotCompat> {\n    let wrappedNextOrObserver:\n      | StorageObserver<UploadTaskSnapshot>\n      | undefined\n      | ((a: UploadTaskSnapshot) => unknown) = undefined;\n    if (!!nextOrObserver) {\n      if (typeof nextOrObserver === 'function') {\n        wrappedNextOrObserver = (taskSnapshot: UploadTaskSnapshot) =>\n          nextOrObserver(\n            new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref)\n          );\n      } else {\n        wrappedNextOrObserver = {\n          next: !!nextOrObserver.next\n            ? (taskSnapshot: UploadTaskSnapshot) =>\n                nextOrObserver.next!(\n                  new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref)\n                )\n            : undefined,\n          complete: nextOrObserver.complete || undefined,\n          error: nextOrObserver.error || undefined\n        };\n      }\n    }\n    return this._delegate.on(\n      type,\n      wrappedNextOrObserver,\n      error || undefined,\n      completed || undefined\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as types from '@firebase/storage-types';\nimport { ListResult } from '../src/list';\nimport { ReferenceCompat } from './reference';\nimport { StorageServiceCompat } from './service';\n\nexport class ListResultCompat implements types.ListResult {\n  constructor(\n    private readonly _delegate: ListResult,\n    private readonly _service: StorageServiceCompat\n  ) {}\n\n  get prefixes(): ReferenceCompat[] {\n    return this._delegate.prefixes.map(\n      ref => new ReferenceCompat(ref, this._service)\n    );\n  }\n  get items(): ReferenceCompat[] {\n    return this._delegate.items.map(\n      ref => new ReferenceCompat(ref, this._service)\n    );\n  }\n  get nextPageToken(): string | null {\n    return this._delegate.nextPageToken || null;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Reference,\n  getChild,\n  uploadBytesResumable,\n  uploadString,\n  list,\n  listAll,\n  getDownloadURL,\n  getMetadata,\n  updateMetadata,\n  deleteObject\n} from '../src/reference';\nimport * as types from '@firebase/storage-types';\nimport { Metadata } from '../src/metadata';\nimport { StringFormat } from '../src/implementation/string';\nimport { ListOptions } from '../src/list';\nimport { UploadTaskCompat } from './task';\nimport { ListResultCompat } from './list';\nimport { StorageServiceCompat } from './service';\nimport { invalidRootOperation } from '../src/implementation/error';\n\nexport class ReferenceCompat implements types.Reference {\n  constructor(\n    private readonly _delegate: Reference,\n    public storage: StorageServiceCompat\n  ) {}\n\n  get name(): string {\n    return this._delegate.name;\n  }\n\n  get bucket(): string {\n    return this._delegate.bucket;\n  }\n\n  get fullPath(): string {\n    return this._delegate.fullPath;\n  }\n\n  toString(): string {\n    return this._delegate.toString();\n  }\n\n  /**\n   * @returns A reference to the object obtained by\n   * appending childPath, removing any duplicate, beginning, or trailing\n   * slashes.\n   */\n  child(childPath: string): types.Reference {\n    const reference = getChild(this._delegate, childPath);\n    return new ReferenceCompat(reference, this.storage);\n  }\n\n  get root(): types.Reference {\n    return new ReferenceCompat(this._delegate.root, this.storage);\n  }\n\n  /**\n   * @returns A reference to the parent of the\n   * current object, or null if the current object is the root.\n   */\n  get parent(): types.Reference | null {\n    const reference = this._delegate.parent;\n    if (reference == null) {\n      return null;\n    }\n    return new ReferenceCompat(reference, this.storage);\n  }\n\n  /**\n   * Uploads a blob to this object's location.\n   * @param data - The blob to upload.\n   * @returns An UploadTask that lets you control and\n   * observe the upload.\n   */\n  put(\n    data: Blob | Uint8Array | ArrayBuffer,\n    metadata?: Metadata\n  ): types.UploadTask {\n    this._throwIfRoot('put');\n    return new UploadTaskCompat(\n      uploadBytesResumable(this._delegate, data, metadata),\n      this\n    );\n  }\n\n  /**\n   * Uploads a string to this object's location.\n   * @param value - The string to upload.\n   * @param format - The format of the string to upload.\n   * @returns An UploadTask that lets you control and\n   * observe the upload.\n   */\n  putString(\n    value: string,\n    format: StringFormat = StringFormat.RAW,\n    metadata?: Metadata\n  ): types.UploadTask {\n    this._throwIfRoot('putString');\n    return new UploadTaskCompat(\n      uploadString(this._delegate, value, format, metadata),\n      this\n    );\n  }\n\n  /**\n   * List all items (files) and prefixes (folders) under this storage reference.\n   *\n   * This is a helper method for calling list() repeatedly until there are\n   * no more results. The default pagination size is 1000.\n   *\n   * Note: The results may not be consistent if objects are changed while this\n   * operation is running.\n   *\n   * Warning: listAll may potentially consume too many resources if there are\n   * too many results.\n   *\n   * @returns A Promise that resolves with all the items and prefixes under\n   *  the current storage reference. `prefixes` contains references to\n   *  sub-directories and `items` contains references to objects in this\n   *  folder. `nextPageToken` is never returned.\n   */\n  listAll(): Promise<types.ListResult> {\n    return listAll(this._delegate).then(\n      r => new ListResultCompat(r, this.storage)\n    );\n  }\n\n  /**\n   * List items (files) and prefixes (folders) under this storage reference.\n   *\n   * List API is only available for Firebase Rules Version 2.\n   *\n   * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n   * delimited folder structure. Refer to GCS's List API if you want to learn more.\n   *\n   * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n   * support objects whose paths end with \"/\" or contain two consecutive\n   * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n   * list() may fail if there are too many unsupported objects in the bucket.\n   *\n   * @param options - See ListOptions for details.\n   * @returns A Promise that resolves with the items and prefixes.\n   * `prefixes` contains references to sub-folders and `items`\n   * contains references to objects in this folder. `nextPageToken`\n   * can be used to get the rest of the results.\n   */\n  list(options?: ListOptions | null): Promise<types.ListResult> {\n    return list(this._delegate, options).then(\n      r => new ListResultCompat(r, this.storage)\n    );\n  }\n\n  /**\n   * A promise that resolves with the metadata for this object. If this\n   * object doesn't exist or metadata cannot be retreived, the promise is\n   * rejected.\n   */\n  getMetadata(): Promise<Metadata> {\n    return getMetadata(this._delegate);\n  }\n\n  /**\n   * Updates the metadata for this object.\n   * @param metadata - The new metadata for the object.\n   * Only values that have been explicitly set will be changed. Explicitly\n   * setting a value to null will remove the metadata.\n   * @returns A promise that resolves\n   * with the new metadata for this object.\n   * @see firebaseStorage.Reference.prototype.getMetadata\n   */\n  updateMetadata(metadata: Metadata): Promise<Metadata> {\n    return updateMetadata(this._delegate, metadata);\n  }\n\n  /**\n   * @returns A promise that resolves with the download\n   * URL for this object.\n   */\n  getDownloadURL(): Promise<string> {\n    return getDownloadURL(this._delegate);\n  }\n\n  /**\n   * Deletes the object at this location.\n   * @returns A promise that resolves if the deletion succeeds.\n   */\n  delete(): Promise<void> {\n    this._throwIfRoot('delete');\n    return deleteObject(this._delegate);\n  }\n\n  private _throwIfRoot(name: string): void {\n    if (this._delegate._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { FirebaseStorageError } from './error';\nimport { Request } from './request';\n\n/**\n * A request whose promise always fails.\n */\nexport class FailRequest<T> implements Request<T> {\n  promise_: Promise<T>;\n\n  constructor(error: FirebaseStorageError) {\n    this.promise_ = Promise.reject<T>(error);\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<T> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(_appDelete = false): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides a method for running a function with exponential\n * backoff.\n */\ntype id = (p1: boolean) => void;\n\nexport { id };\n\n/**\n * @param f May be invoked\n *     before the function returns.\n * @param callback Get all the arguments passed to the function\n *     passed to f, including the initial boolean.\n */\nexport function start(\n  f: (p1: (success: boolean) => void, canceled: boolean) => void,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  callback: (...args: any[]) => unknown,\n  timeout: number\n): id {\n  // TODO(andysoto): make this code cleaner (probably refactor into an actual\n  // type instead of a bunch of functions with state shared in the closure)\n  let waitSeconds = 1;\n  // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\n  // TODO: find a way to exclude Node type definition for storage because storage only works in browser\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let timeoutId: any = null;\n  let hitTimeout = false;\n  let cancelState = 0;\n\n  function canceled(): boolean {\n    return cancelState === 2;\n  }\n  let triggeredCallback = false;\n\n  function triggerCallback(...args: any[]): void {\n    if (!triggeredCallback) {\n      triggeredCallback = true;\n      callback.apply(null, args);\n    }\n  }\n\n  function callWithDelay(millis: number): void {\n    timeoutId = setTimeout(() => {\n      timeoutId = null;\n      f(handler, canceled());\n    }, millis);\n  }\n\n  function handler(success: boolean, ...args: any[]): void {\n    if (triggeredCallback) {\n      return;\n    }\n    if (success) {\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    const mustStop = canceled() || hitTimeout;\n    if (mustStop) {\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    if (waitSeconds < 64) {\n      /* TODO(andysoto): don't back off so quickly if we know we're offline. */\n      waitSeconds *= 2;\n    }\n    let waitMillis;\n    if (cancelState === 1) {\n      cancelState = 2;\n      waitMillis = 0;\n    } else {\n      waitMillis = (waitSeconds + Math.random()) * 1000;\n    }\n    callWithDelay(waitMillis);\n  }\n  let stopped = false;\n\n  function stop(wasTimeout: boolean): void {\n    if (stopped) {\n      return;\n    }\n    stopped = true;\n    if (triggeredCallback) {\n      return;\n    }\n    if (timeoutId !== null) {\n      if (!wasTimeout) {\n        cancelState = 2;\n      }\n      clearTimeout(timeoutId);\n      callWithDelay(0);\n    } else {\n      if (!wasTimeout) {\n        cancelState = 1;\n      }\n    }\n  }\n  callWithDelay(0);\n  setTimeout(() => {\n    hitTimeout = true;\n    stop(true);\n  }, timeout);\n  return stop;\n}\n\n/**\n * Stops the retry loop from repeating.\n * If the function is currently \"in between\" retries, it is invoked immediately\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\n * after the current invocation finishes iff the current invocation would have\n * triggered another retry.\n */\nexport function stop(id: id): void {\n  id(false);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods used to actually send HTTP requests from\n * abstract representations.\n */\n\nimport firebase from '@firebase/app';\nimport * as backoff from './backoff';\nimport {\n  FirebaseStorageError,\n  unknown,\n  appDeleted,\n  canceled,\n  retryLimitExceeded\n} from './error';\nimport { RequestInfo } from './requestinfo';\nimport * as type from './type';\nimport * as UrlUtils from './url';\nimport { Headers, XhrIo, ErrorCode } from './xhrio';\nimport { XhrIoPool } from './xhriopool';\n\nexport interface Request<T> {\n  getPromise(): Promise<T>;\n\n  /**\n   * Cancels the request. IMPORTANT: the promise may still be resolved with an\n   * appropriate value (if the request is finished before you call this method,\n   * but the promise has not yet been resolved), so don't just assume it will be\n   * rejected if you call this function.\n   * @param appDelete - True if the cancelation came from the app being deleted.\n   */\n  cancel(appDelete?: boolean): void;\n}\n\nclass NetworkRequest<T> implements Request<T> {\n  private url_: string;\n  private method_: string;\n  private headers_: Headers;\n  private body_: string | Blob | Uint8Array | null;\n  private successCodes_: number[];\n  private additionalRetryCodes_: number[];\n  private pendingXhr_: XhrIo | null = null;\n  private backoffId_: backoff.id | null = null;\n  private resolve_!: (value?: T | PromiseLike<T> | undefined) => void;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private reject_!: (reason?: any) => void;\n  private canceled_: boolean = false;\n  private appDelete_: boolean = false;\n  private callback_: (p1: XhrIo, p2: string) => T;\n  private errorCallback_:\n    | ((p1: XhrIo, p2: FirebaseStorageError) => FirebaseStorageError)\n    | null;\n  private progressCallback_: ((p1: number, p2: number) => void) | null;\n  private timeout_: number;\n  private pool_: XhrIoPool;\n  promise_: Promise<T>;\n\n  constructor(\n    url: string,\n    method: string,\n    headers: Headers,\n    body: string | Blob | Uint8Array | null,\n    successCodes: number[],\n    additionalRetryCodes: number[],\n    callback: (p1: XhrIo, p2: string) => T,\n    errorCallback:\n      | ((p1: XhrIo, p2: FirebaseStorageError) => FirebaseStorageError)\n      | null,\n    timeout: number,\n    progressCallback: ((p1: number, p2: number) => void) | null,\n    pool: XhrIoPool\n  ) {\n    this.url_ = url;\n    this.method_ = method;\n    this.headers_ = headers;\n    this.body_ = body;\n    this.successCodes_ = successCodes.slice();\n    this.additionalRetryCodes_ = additionalRetryCodes.slice();\n    this.callback_ = callback;\n    this.errorCallback_ = errorCallback;\n    this.progressCallback_ = progressCallback;\n    this.timeout_ = timeout;\n    this.pool_ = pool;\n    this.promise_ = new Promise((resolve, reject) => {\n      this.resolve_ = resolve;\n      this.reject_ = reject;\n      this.start_();\n    });\n  }\n\n  /**\n   * Actually starts the retry loop.\n   */\n  private start_(): void {\n    const self = this;\n\n    function doTheRequest(\n      backoffCallback: (p1: boolean, ...p2: unknown[]) => void,\n      canceled: boolean\n    ): void {\n      if (canceled) {\n        backoffCallback(false, new RequestEndStatus(false, null, true));\n        return;\n      }\n      const xhr = self.pool_.createXhrIo();\n      self.pendingXhr_ = xhr;\n\n      function progressListener(progressEvent: ProgressEvent): void {\n        const loaded = progressEvent.loaded;\n        const total = progressEvent.lengthComputable ? progressEvent.total : -1;\n        if (self.progressCallback_ !== null) {\n          self.progressCallback_(loaded, total);\n        }\n      }\n      if (self.progressCallback_ !== null) {\n        xhr.addUploadProgressListener(progressListener);\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      xhr\n        .send(self.url_, self.method_, self.body_, self.headers_)\n        .then((xhr: XhrIo) => {\n          if (self.progressCallback_ !== null) {\n            xhr.removeUploadProgressListener(progressListener);\n          }\n          self.pendingXhr_ = null;\n          xhr = xhr as XhrIo;\n          const hitServer = xhr.getErrorCode() === ErrorCode.NO_ERROR;\n          const status = xhr.getStatus();\n          if (!hitServer || self.isRetryStatusCode_(status)) {\n            const wasCanceled = xhr.getErrorCode() === ErrorCode.ABORT;\n            backoffCallback(\n              false,\n              new RequestEndStatus(false, null, wasCanceled)\n            );\n            return;\n          }\n          const successCode = self.successCodes_.indexOf(status) !== -1;\n          backoffCallback(true, new RequestEndStatus(successCode, xhr));\n        });\n    }\n\n    /**\n     * @param requestWentThrough - True if the request eventually went\n     *     through, false if it hit the retry limit or was canceled.\n     */\n    function backoffDone(\n      requestWentThrough: boolean,\n      status: RequestEndStatus\n    ): void {\n      const resolve = self.resolve_;\n      const reject = self.reject_;\n      const xhr = status.xhr as XhrIo;\n      if (status.wasSuccessCode) {\n        try {\n          const result = self.callback_(xhr, xhr.getResponseText());\n          if (type.isJustDef(result)) {\n            resolve(result);\n          } else {\n            resolve();\n          }\n        } catch (e) {\n          reject(e);\n        }\n      } else {\n        if (xhr !== null) {\n          const err = unknown();\n          err.serverResponse = xhr.getResponseText();\n          if (self.errorCallback_) {\n            reject(self.errorCallback_(xhr, err));\n          } else {\n            reject(err);\n          }\n        } else {\n          if (status.canceled) {\n            const err = self.appDelete_ ? appDeleted() : canceled();\n            reject(err);\n          } else {\n            const err = retryLimitExceeded();\n            reject(err);\n          }\n        }\n      }\n    }\n    if (this.canceled_) {\n      backoffDone(false, new RequestEndStatus(false, null, true));\n    } else {\n      this.backoffId_ = backoff.start(doTheRequest, backoffDone, this.timeout_);\n    }\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<T> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(appDelete?: boolean): void {\n    this.canceled_ = true;\n    this.appDelete_ = appDelete || false;\n    if (this.backoffId_ !== null) {\n      backoff.stop(this.backoffId_);\n    }\n    if (this.pendingXhr_ !== null) {\n      this.pendingXhr_.abort();\n    }\n  }\n\n  private isRetryStatusCode_(status: number): boolean {\n    // The codes for which to retry came from this page:\n    // https://cloud.google.com/storage/docs/exponential-backoff\n    const isFiveHundredCode = status >= 500 && status < 600;\n    const extraRetryCodes = [\n      // Request Timeout: web server didn't receive full request in time.\n      408,\n      // Too Many Requests: you're getting rate-limited, basically.\n      429\n    ];\n    const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\n    const isRequestSpecificRetryCode =\n      this.additionalRetryCodes_.indexOf(status) !== -1;\n    return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;\n  }\n}\n\n/**\n * A collection of information about the result of a network request.\n * @param opt_canceled - Defaults to false.\n */\nexport class RequestEndStatus {\n  /**\n   * True if the request was canceled.\n   */\n  canceled: boolean;\n\n  constructor(\n    public wasSuccessCode: boolean,\n    public xhr: XhrIo | null,\n    canceled?: boolean\n  ) {\n    this.canceled = !!canceled;\n  }\n}\n\nexport function addAuthHeader_(\n  headers: Headers,\n  authToken: string | null\n): void {\n  if (authToken !== null && authToken.length > 0) {\n    headers['Authorization'] = 'Firebase ' + authToken;\n  }\n}\n\nexport function addVersionHeader_(headers: Headers): void {\n  const version =\n    typeof firebase !== 'undefined' ? firebase.SDK_VERSION : 'AppManager';\n  headers['X-Firebase-Storage-Version'] = 'webjs/' + version;\n}\n\nexport function addGmpidHeader_(headers: Headers, appId: string | null): void {\n  if (appId) {\n    headers['X-Firebase-GMPID'] = appId;\n  }\n}\n\nexport function makeRequest<T>(\n  requestInfo: RequestInfo<T>,\n  appId: string | null,\n  authToken: string | null,\n  pool: XhrIoPool\n): Request<T> {\n  const queryPart = UrlUtils.makeQueryString(requestInfo.urlParams);\n  const url = requestInfo.url + queryPart;\n  const headers = Object.assign({}, requestInfo.headers);\n  addGmpidHeader_(headers, appId);\n  addAuthHeader_(headers, authToken);\n  addVersionHeader_(headers);\n  return new NetworkRequest<T>(\n    url,\n    requestInfo.method,\n    headers,\n    requestInfo.body,\n    requestInfo.successCodes,\n    requestInfo.additionalRetryCodes,\n    requestInfo.handler,\n    requestInfo.errorHandler,\n    requestInfo.timeout,\n    requestInfo.progressCallback,\n    pool\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Location } from './implementation/location';\nimport { FailRequest } from './implementation/failrequest';\nimport { Request, makeRequest } from './implementation/request';\nimport { RequestInfo } from './implementation/requestinfo';\nimport { XhrIoPool } from './implementation/xhriopool';\nimport { Reference, getChild } from './reference';\nimport { Provider } from '@firebase/component';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  _FirebaseService\n} from '@firebase/app-types-exp';\nimport * as constants from '../src/implementation/constants';\nimport {\n  invalidArgument,\n  appDeleted,\n  noDefaultBucket\n} from './implementation/error';\nimport { validateNumber } from './implementation/type';\n\nexport function isUrl(path?: string): boolean {\n  return /^[A-Za-z]+:\\/\\//.test(path as string);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given url.\n */\nfunction refFromURL(service: StorageService, url: string): Reference {\n  return new Reference(service, url);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given path in the default\n * bucket.\n */\nfunction refFromPath(\n  ref: StorageService | Reference,\n  path?: string\n): Reference {\n  if (ref instanceof StorageService) {\n    const service = ref;\n    if (service._bucket == null) {\n      throw noDefaultBucket();\n    }\n    const reference = new Reference(service, service._bucket!);\n    if (path != null) {\n      return refFromPath(reference, path);\n    } else {\n      return reference;\n    }\n  } else {\n    // ref is a Reference\n    if (path !== undefined) {\n      if (path.includes('..')) {\n        throw invalidArgument('`path` param cannot contain \"..\"');\n      }\n      return getChild(ref, path);\n    } else {\n      return ref;\n    }\n  }\n}\n\n/**\n * Returns a storage Reference for the given url.\n * @param storage - `Storage` instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: StorageService, url?: string): Reference;\n/**\n * Returns a storage Reference for the given path in the\n * default bucket.\n * @param storageOrRef - `Storage` service or storage `Reference`.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if Storage\n * instance provided) or returns same reference (if Reference provided).\n * @public\n */\nexport function ref(\n  storageOrRef: StorageService | Reference,\n  path?: string\n): Reference;\nexport function ref(\n  serviceOrRef: StorageService | Reference,\n  pathOrUrl?: string\n): Reference | null {\n  if (pathOrUrl && isUrl(pathOrUrl)) {\n    if (serviceOrRef instanceof StorageService) {\n      return refFromURL(serviceOrRef, pathOrUrl);\n    } else {\n      throw invalidArgument(\n        'To use ref(service, url), the first argument must be a Storage instance.'\n      );\n    }\n  } else {\n    return refFromPath(serviceOrRef, pathOrUrl);\n  }\n}\n\nfunction extractBucket(config?: FirebaseOptions): Location | null {\n  const bucketString = config?.[constants.CONFIG_STORAGE_BUCKET_KEY];\n  if (bucketString == null) {\n    return null;\n  }\n  return Location.makeFromBucketSpec(bucketString);\n}\n\n/**\n * A service that provides Firebase Storage Reference instances.\n * @param opt_url - gs:// url to a custom Storage Bucket\n */\nexport class StorageService implements _FirebaseService {\n  /**\n   * @internal\n   */\n  readonly _bucket: Location | null = null;\n  protected readonly _appId: string | null = null;\n  private readonly _requests: Set<Request<unknown>>;\n  private _deleted: boolean = false;\n  private _maxOperationRetryTime: number;\n  private _maxUploadRetryTime: number;\n\n  constructor(\n    readonly app: FirebaseApp,\n    /**\n     * @internal\n     */\n    readonly _authProvider: Provider<FirebaseAuthInternalName>,\n    /**\n     * @internal\n     */\n    readonly _pool: XhrIoPool,\n    /**\n     * @internal\n     */\n    readonly _url?: string\n  ) {\n    this._maxOperationRetryTime = constants.DEFAULT_MAX_OPERATION_RETRY_TIME;\n    this._maxUploadRetryTime = constants.DEFAULT_MAX_UPLOAD_RETRY_TIME;\n    this._requests = new Set();\n    if (_url != null) {\n      this._bucket = Location.makeFromBucketSpec(_url);\n    } else {\n      this._bucket = extractBucket(this.app.options);\n    }\n  }\n\n  get maxUploadRetryTime(): number {\n    return this._maxUploadRetryTime;\n  }\n\n  set maxUploadRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxUploadRetryTime = time;\n  }\n\n  get maxOperationRetryTime(): number {\n    return this._maxOperationRetryTime;\n  }\n\n  set maxOperationRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxOperationRetryTime = time;\n  }\n\n  async getAuthToken(): Promise<string | null> {\n    const auth = this._authProvider.getImmediate({ optional: true });\n    if (auth) {\n      const tokenData = await auth.getToken();\n      if (tokenData !== null) {\n        return tokenData.accessToken;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Stop running requests and prevent more from being created.\n   * @internal\n   */\n  _delete(): Promise<void> {\n    this._deleted = true;\n    this._requests.forEach(request => request.cancel());\n    this._requests.clear();\n    return Promise.resolve();\n  }\n\n  /**\n   * Returns a new firebaseStorage.Reference object referencing this StorageService\n   * at the given Location.\n   */\n  makeStorageReference(loc: Location): Reference {\n    return new Reference(this, loc);\n  }\n\n  /**\n   * @internal\n   * @param requestInfo - HTTP RequestInfo object\n   * @param authToken - Firebase auth token\n   */\n  makeRequest<T>(\n    requestInfo: RequestInfo<T>,\n    authToken: string | null\n  ): Request<T> {\n    if (!this._deleted) {\n      const request = makeRequest(\n        requestInfo,\n        this._appId,\n        authToken,\n        this._pool\n      );\n      this._requests.add(request);\n      // Request removes itself from set when complete.\n      request.getPromise().then(\n        () => this._requests.delete(request),\n        () => this._requests.delete(request)\n      );\n      return request;\n    } else {\n      return new FailRequest(appDeleted());\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as types from '@firebase/storage-types';\nimport { StorageService, isUrl, ref } from '../src/service';\nimport { Location } from '../src/implementation/location';\nimport { ReferenceCompat } from './reference';\nimport { invalidArgument } from '../src/implementation/error';\nimport { FirebaseApp } from '@firebase/app-types';\n\n/**\n * A service that provides firebaseStorage.Reference instances.\n * @param opt_url gs:// url to a custom Storage Bucket\n */\nexport class StorageServiceCompat implements types.FirebaseStorage {\n  constructor(public app: FirebaseApp, readonly _delegate: StorageService) {}\n\n  INTERNAL = {\n    /**\n     * Called when the associated app is deleted.\n     */\n    delete: () => {\n      return this._delegate._delete();\n    }\n  };\n\n  get maxOperationRetryTime(): number {\n    return this._delegate.maxOperationRetryTime;\n  }\n\n  get maxUploadRetryTime(): number {\n    return this._delegate.maxUploadRetryTime;\n  }\n\n  /**\n   * Returns a firebaseStorage.Reference for the given path in the default\n   * bucket.\n   */\n  ref(path?: string): types.Reference {\n    if (isUrl(path)) {\n      throw invalidArgument(\n        'ref() expected a child path but got a URL, use refFromURL instead.'\n      );\n    }\n    return new ReferenceCompat(ref(this._delegate, path), this);\n  }\n\n  /**\n   * Returns a firebaseStorage.Reference object for the given absolute URL,\n   * which must be a gs:// or http[s]:// URL.\n   */\n  refFromURL(url: string): types.Reference {\n    if (!isUrl(url)) {\n      throw invalidArgument(\n        'refFromURL() expected a full URL but got a child path, use ref() instead.'\n      );\n    }\n    try {\n      Location.makeFromUrl(url);\n    } catch (e) {\n      throw invalidArgument(\n        'refFromUrl() expected a valid full URL but got an invalid one.'\n      );\n    }\n    return new ReferenceCompat(ref(this._delegate, url), this);\n  }\n\n  setMaxUploadRetryTime(time: number): void {\n    this._delegate.maxUploadRetryTime = time;\n  }\n\n  setMaxOperationRetryTime(time: number): void {\n    this._delegate.maxOperationRetryTime = time;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport { StringFormat } from '../src/implementation/string';\nimport { TaskEvent, TaskState } from '../src/implementation/taskenums';\n\nimport { XhrIoPool } from '../src/implementation/xhriopool';\nimport { ReferenceCompat } from './reference';\nimport { StorageServiceCompat } from './service';\nimport { StorageService } from '../src/service';\nimport * as types from '@firebase/storage-types';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer\n} from '@firebase/component';\n\nimport { name, version } from '../package.json';\n\n/**\n * Type constant for Firebase Storage.\n */\nconst STORAGE_TYPE = 'storage';\n\nfunction factory(\n  container: ComponentContainer,\n  url?: string\n): types.FirebaseStorage {\n  // Dependencies\n  // TODO: This should eventually be 'app-compat'\n  const app = container.getProvider('app').getImmediate();\n  const authProvider = container.getProvider('auth-internal');\n\n  // TODO: get StorageService instance from component framework instead\n  // of creating a new one.\n  const storageServiceCompat: StorageServiceCompat = new StorageServiceCompat(\n    app,\n    new StorageService(app, authProvider, new XhrIoPool(), url)\n  );\n  return storageServiceCompat;\n}\n\nexport function registerStorage(instance: _FirebaseNamespace): void {\n  const namespaceExports = {\n    // no-inline\n    TaskState,\n    TaskEvent,\n    StringFormat,\n    Storage: StorageService,\n    Reference: ReferenceCompat\n  };\n  instance.INTERNAL.registerComponent(\n    new Component(STORAGE_TYPE, factory, ComponentType.PUBLIC)\n      .setServiceProps(namespaceExports)\n      .setMultipleInstances(true)\n  );\n\n  instance.registerVersion(name, version);\n}\n\nregisterStorage(firebase as _FirebaseNamespace);\n\n/**\n * Define extension behavior for `registerStorage`\n */\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    storage?: {\n      (app?: FirebaseApp): types.FirebaseStorage;\n      Storage: typeof types.FirebaseStorage;\n\n      StringFormat: {\n        BASE64: types.StringFormat;\n        BASE64URL: types.StringFormat;\n        DATA_URL: types.StringFormat;\n        RAW: types.StringFormat;\n      };\n      TaskEvent: {\n        STATE_CHANGED: types.TaskEvent;\n      };\n      TaskState: {\n        CANCELED: types.TaskState;\n        ERROR: types.TaskState;\n        PAUSED: types.TaskState;\n        RUNNING: types.TaskState;\n        SUCCESS: types.TaskState;\n      };\n    };\n  }\n  interface FirebaseApp {\n    storage?(storageBucket?: string): types.FirebaseStorage;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}