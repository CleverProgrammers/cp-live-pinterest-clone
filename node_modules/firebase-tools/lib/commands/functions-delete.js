"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("../command");
const clc = require("cli-color");
const cloudfunctions = require("../gcp/cloudfunctions");
const functionsConfig = require("../functionsConfig");
const functionsDelete_1 = require("../functionsDelete");
const getProjectId = require("../getProjectId");
const helper = require("../functionsDeployHelper");
const prompt_1 = require("../prompt");
const requirePermissions_1 = require("../requirePermissions");
const utils = require("../utils");
exports.default = new command_1.Command("functions:delete [filters...]")
    .description("delete one or more Cloud Functions by name or group name.")
    .option("--region <region>", "Specify region of the function to be deleted. " +
    "If omitted, functions from all regions whose names match the filters will be deleted. ")
    .option("-f, --force", "No confirmation. Otherwise, a confirmation prompt will appear.")
    .before(requirePermissions_1.requirePermissions, ["cloudfunctions.functions.list", "cloudfunctions.functions.delete"])
    .action(async (filters, options) => {
    if (!filters.length) {
        return utils.reject("Must supply at least function or group name.");
    }
    const projectId = getProjectId(options);
    const filterChunks = filters.map((filter) => {
        return filter.split(".");
    });
    const config = await functionsConfig.getFirebaseConfig(options);
    const appEngineLocation = functionsConfig.getAppEngineLocation(config);
    const existingFns = await cloudfunctions.listAllFunctions(projectId);
    const functionsToDelete = existingFns.filter((fn) => {
        const regionMatches = options.region ? helper.getRegion(fn.name) === options.region : true;
        const nameMatches = helper.functionMatchesAnyGroup(fn.name, filterChunks);
        return regionMatches && nameMatches;
    });
    if (functionsToDelete.length === 0) {
        return utils.reject(`The specified filters do not match any existing functions in project ${clc.bold(projectId)}.`, { exit: 1 });
    }
    const scheduledFnNamesToDelete = functionsToDelete
        .filter((fn) => {
        var _a;
        return ((_a = fn.labels) === null || _a === void 0 ? void 0 : _a["deployment-scheduled"]) === "true";
    })
        .map((fn) => fn.name);
    const fnNamesToDelete = functionsToDelete.map((fn) => fn.name);
    let confirmDeletion = false;
    if (!options.force) {
        const deleteList = fnNamesToDelete
            .map((func) => {
            return "\t" + helper.getFunctionLabel(func);
        })
            .join("\n");
        confirmDeletion = await prompt_1.prompt(options, [
            {
                type: "confirm",
                name: "confirm",
                default: false,
                message: "You are about to delete the following Cloud Functions:\n" +
                    deleteList +
                    "\n  Are you sure?",
            },
        ]);
    }
    if (!confirmDeletion && !options.force) {
        return utils.reject("Command aborted.", { exit: 1 });
    }
    return await functionsDelete_1.deleteFunctions(fnNamesToDelete, scheduledFnNamesToDelete, projectId, appEngineLocation);
});
