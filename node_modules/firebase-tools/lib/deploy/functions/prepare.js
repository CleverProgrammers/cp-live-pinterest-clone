"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepare = void 0;
const clc = require("cli-color");
const ensureApiEnabled = require("../../ensureApiEnabled");
const functionsConfig = require("../../functionsConfig");
const getProjectId = require("../../getProjectId");
const utils_1 = require("../../utils");
const parseRuntimeAndValidateSDK_1 = require("../../parseRuntimeAndValidateSDK");
const functionsDeployHelper_1 = require("../../functionsDeployHelper");
const deploymentPlanner_1 = require("./deploymentPlanner");
const prompts_1 = require("./prompts");
const prepareFunctionsUpload_1 = require("../../prepareFunctionsUpload");
const validate = require("./validate");
const checkRuntimeDependencies_1 = require("./checkRuntimeDependencies");
async function prepare(context, options, payload) {
    if (!options.config.has("functions")) {
        return;
    }
    const sourceDirName = options.config.get("functions.source");
    const sourceDir = options.config.path(sourceDirName);
    const projectDir = options.config.projectDir;
    const projectId = getProjectId(options);
    const runtimeFromConfig = options.config.get("functions.runtime");
    context.runtimeChoice = parseRuntimeAndValidateSDK_1.getRuntimeChoice(sourceDir, runtimeFromConfig);
    const checkAPIsEnabled = await Promise.all([
        ensureApiEnabled.ensure(options.project, "cloudfunctions.googleapis.com", "functions"),
        ensureApiEnabled.check(projectId, "runtimeconfig.googleapis.com", "runtimeconfig", true),
        checkRuntimeDependencies_1.checkRuntimeDependencies(projectId, context.runtimeChoice),
    ]);
    context.runtimeConfigEnabled = checkAPIsEnabled[1];
    const firebaseConfig = await functionsConfig.getFirebaseConfig(options);
    context.firebaseConfig = firebaseConfig;
    utils_1.logBullet(clc.cyan.bold("functions:") +
        " preparing " +
        clc.bold(options.config.get("functions.source")) +
        " directory for uploading...");
    const source = await prepareFunctionsUpload_1.prepareFunctionsUpload(context, options);
    context.functionsSource = source;
    const defaultEnvVariables = {
        FIREBASE_CONFIG: JSON.stringify(context.firebaseConfig),
    };
    const functions = options.config.get("functions.triggers");
    functions.forEach((fn) => {
        fn.environmentVariables = defaultEnvVariables;
    });
    const includesScheduledFunctions = functions.some((fn) => fn.schedule);
    if (includesScheduledFunctions) {
        await Promise.all([
            ensureApiEnabled.ensure(projectId, "cloudscheduler.googleapis.com", "scheduler", false),
            ensureApiEnabled.ensure(projectId, "pubsub.googleapis.com", "pubsub", false),
        ]);
    }
    payload.functions = {};
    payload.functions.byRegion = deploymentPlanner_1.functionsByRegion(projectId, functions);
    payload.functions.triggers = deploymentPlanner_1.allFunctions(payload.functions.byRegion);
    validate.functionsDirectoryExists(options, sourceDirName);
    validate.packageJsonIsValid(sourceDirName, sourceDir, projectDir, !!runtimeFromConfig);
    context.filters = functionsDeployHelper_1.getFilterGroups(options);
    const localFnsInRelease = payload.functions.triggers.filter((fn) => {
        return functionsDeployHelper_1.functionMatchesAnyGroup(fn.name, context.filters);
    });
    await prompts_1.promptForFailurePolicies(options, localFnsInRelease);
}
exports.prepare = prepare;
