"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ErrorHandler = void 0;
const clc = require("cli-color");
const logger = require("../../logger");
const functionsDeployHelper_1 = require("../../functionsDeployHelper");
const error_1 = require("../../error");
class ErrorHandler {
    constructor() {
        this.errors = [];
        this.warnings = [];
    }
    record(level, functionName, operationType, message) {
        const info = {
            functionName,
            operationType,
            message,
        };
        if (level === "error") {
            this.errors.push(info);
        }
        else if (level === "warning") {
            this.warnings.push(info);
        }
    }
    printErrors() {
        if (this.errors.length === 0) {
            return;
        }
        logger.info("\nFunctions deploy had errors with the following functions:");
        for (const failedDeployment of this.errors) {
            logger.info(`\t${functionsDeployHelper_1.getFunctionLabel(failedDeployment.functionName)}`);
        }
        logger.info("\nTo try redeploying those functions, run:");
        logger.info("    " +
            clc.bold("firebase deploy --only ") +
            clc.bold('"') +
            clc.bold(this.errors
                .map((failedDeployment) => `functions:${functionsDeployHelper_1.getFunctionId(failedDeployment.functionName).replace(/-/g, ".")}`)
                .join(",")) +
            clc.bold('"'));
        logger.info("\nTo continue deploying other features (such as database), run:");
        logger.info("    " + clc.bold("firebase deploy --except functions"));
        for (const failedDeployment of this.errors) {
            logger.debug(`\tError during ${failedDeployment.operationType} for ${failedDeployment.functionName}: ${failedDeployment.message}`);
        }
        throw new error_1.FirebaseError("Functions did not deploy properly.");
    }
    printWarnings() {
        if (this.warnings.length === 0) {
            return;
        }
        const failedIamCalls = this.warnings.filter((e) => e.operationType === "make public");
        if (failedIamCalls.length) {
            logger.info("\nUnable to set publicly accessible IAM policy on the following functions:");
            for (const failedDep of failedIamCalls) {
                logger.info(`\t${failedDep.functionName}`);
            }
            logger.info("\nUnauthenticated users will not be able access this function.");
            logger.info("\nSome common causes of this:");
            logger.info("\n- You may not have the roles/functions.admin IAM role. Note that roles/functions.developer does not allow you to change IAM policies.");
            logger.info("\n- An organization policy that restricts Network Access on your project.");
        }
        for (const failedDeployment of this.warnings) {
            logger.debug(`\tWarning during${failedDeployment.operationType} for ${failedDeployment.functionName}: ${failedDeployment.message}`);
        }
    }
}
exports.ErrorHandler = ErrorHandler;
