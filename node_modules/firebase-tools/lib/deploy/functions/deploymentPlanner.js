"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createDeploymentPlan = exports.allFunctions = exports.functionsByRegion = void 0;
const deploymentTool = require("../../deploymentTool");
const functionsDeployHelper_1 = require("../../functionsDeployHelper");
const validate_1 = require("./validate");
function functionsByRegion(projectId, localFunctions) {
    const regionMap = {};
    for (const trigger of localFunctions) {
        if (!trigger.regions) {
            trigger.regions = ["us-central1"];
        }
        for (const region of trigger.regions) {
            const triggerDeepCopy = JSON.parse(JSON.stringify(trigger));
            if (triggerDeepCopy.regions) {
                delete triggerDeepCopy.regions;
            }
            triggerDeepCopy.name = [
                "projects",
                projectId,
                "locations",
                region,
                "functions",
                trigger.name,
            ].join("/");
            regionMap[region] = regionMap[region] || [];
            regionMap[region].push(triggerDeepCopy);
        }
    }
    return regionMap;
}
exports.functionsByRegion = functionsByRegion;
function allFunctions(regionMap) {
    const triggers = [];
    for (const [k, v] of Object.entries(regionMap)) {
        triggers.push(...v);
    }
    return triggers;
}
exports.allFunctions = allFunctions;
function createDeploymentPlan(localFunctionsByRegion, existingFunctions, filters) {
    var _a, _b;
    let existingFnsCopy = [...existingFunctions];
    const deployment = {
        regionalDeployments: [],
        functionsToDelete: [],
        schedulesToDelete: [],
    };
    for (const region in localFunctionsByRegion) {
        const regionalDeployment = {
            region,
            functionsToCreate: [],
            functionsToUpdate: [],
            schedulesToUpsert: [],
        };
        const localFunctionsInRegion = localFunctionsByRegion[region];
        for (const fn of localFunctionsInRegion) {
            if (!functionsDeployHelper_1.functionMatchesAnyGroup(fn.name, filters)) {
                continue;
            }
            const matchingExistingFunction = existingFnsCopy.find((exFn) => exFn.name === fn.name);
            const isMatchingExisitingFnScheduled = ((_a = matchingExistingFunction === null || matchingExistingFunction === void 0 ? void 0 : matchingExistingFunction.labels) === null || _a === void 0 ? void 0 : _a["deployment-scheduled"]) === "true";
            if (fn.schedule) {
                fn.eventTrigger.resource = functionsDeployHelper_1.getTopicName(fn.name);
                regionalDeployment.schedulesToUpsert.push(fn);
            }
            else if (isMatchingExisitingFnScheduled) {
                deployment.schedulesToDelete.push(matchingExistingFunction.name);
            }
            if (matchingExistingFunction) {
                validate_1.checkForInvalidChangeOfTrigger(fn, matchingExistingFunction);
                regionalDeployment.functionsToUpdate.push(fn);
                existingFnsCopy = existingFnsCopy.filter((exFn) => {
                    return exFn.name !== fn.name;
                });
            }
            else {
                regionalDeployment.functionsToCreate.push(fn);
            }
        }
        deployment.regionalDeployments.push(regionalDeployment);
    }
    const functionsToDelete = existingFnsCopy
        .filter((fn) => {
        return deploymentTool.isFirebaseManaged(fn.labels);
    })
        .filter((fn) => {
        return functionsDeployHelper_1.functionMatchesAnyGroup(fn.name, filters);
    });
    deployment.functionsToDelete = functionsToDelete.map((fn) => {
        return fn.name;
    });
    for (const fn of functionsToDelete) {
        if (((_b = fn.labels) === null || _b === void 0 ? void 0 : _b["deployment-scheduled"]) === "true") {
            deployment.schedulesToDelete.push(fn.name);
        }
    }
    return deployment;
}
exports.createDeploymentPlan = createDeploymentPlan;
