import * as api from '@opentelemetry/api';
import { InstrumentationLibrary } from '@opentelemetry/core';
import { Resource } from '@opentelemetry/resources';
import { ReadableSpan } from './export/ReadableSpan';
import { Tracer } from './Tracer';
import { AttributeValue } from '@opentelemetry/api';
/**
 * This class represents a span.
 */
export declare class Span implements api.Span, ReadableSpan {
    readonly spanContext: api.SpanContext;
    readonly kind: api.SpanKind;
    readonly parentSpanId?: string;
    readonly attributes: api.Attributes;
    readonly links: api.Link[];
    readonly events: api.TimedEvent[];
    readonly startTime: api.HrTime;
    readonly resource: Resource;
    readonly instrumentationLibrary: InstrumentationLibrary;
    name: string;
    status: api.Status;
    endTime: api.HrTime;
    private _ended;
    private _duration;
    private readonly _logger;
    private readonly _spanProcessor;
    private readonly _traceParams;
    /** Constructs a new Span instance. */
    constructor(parentTracer: Tracer, spanName: string, spanContext: api.SpanContext, kind: api.SpanKind, parentSpanId?: string, links?: api.Link[], startTime?: api.TimeInput);
    context(): api.SpanContext;
    setAttribute(key: string, value?: AttributeValue): this;
    setAttributes(attributes: api.Attributes): this;
    /**
     *
     * @param name Span Name
     * @param [attributesOrStartTime] Span attributes or start time
     *     if type is {@type TimeInput} and 3rd param is undefined
     * @param [startTime] Specified start time for the event
     */
    addEvent(name: string, attributesOrStartTime?: api.Attributes | api.TimeInput, startTime?: api.TimeInput): this;
    setStatus(status: api.Status): this;
    updateName(name: string): this;
    end(endTime?: api.TimeInput): void;
    isRecording(): boolean;
    recordException(exception: api.Exception, time?: api.TimeInput): void;
    get duration(): api.HrTime;
    get ended(): boolean;
    private _isSpanEnded;
}
//# sourceMappingURL=Span.d.ts.map