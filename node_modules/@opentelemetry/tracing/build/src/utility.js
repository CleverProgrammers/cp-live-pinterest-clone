"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.mergeConfig = void 0;
const config_1 = require("./config");
const core_1 = require("@opentelemetry/core");
/**
 * Function to merge Default configuration (as specified in './config') with
 * user provided configurations.
 */
function mergeConfig(userConfig) {
    const traceParams = userConfig.traceParams;
    const otelSamplingProbability = core_1.getEnv().OTEL_SAMPLING_PROBABILITY;
    const target = Object.assign(config_1.DEFAULT_CONFIG, 
    // use default AlwaysOnSampler if otelSamplingProbability is 1
    otelSamplingProbability !== undefined && otelSamplingProbability < 1
        ? {
            sampler: new core_1.ParentBasedSampler({
                root: new core_1.TraceIdRatioBasedSampler(otelSamplingProbability),
            }),
        }
        : {}, userConfig);
    // the user-provided value will be used to extend the default value.
    if (traceParams) {
        target.traceParams.numberOfAttributesPerSpan =
            traceParams.numberOfAttributesPerSpan || config_1.DEFAULT_MAX_ATTRIBUTES_PER_SPAN;
        target.traceParams.numberOfEventsPerSpan =
            traceParams.numberOfEventsPerSpan || config_1.DEFAULT_MAX_EVENTS_PER_SPAN;
        target.traceParams.numberOfLinksPerSpan =
            traceParams.numberOfLinksPerSpan || config_1.DEFAULT_MAX_LINKS_PER_SPAN;
    }
    return target;
}
exports.mergeConfig = mergeConfig;
//# sourceMappingURL=utility.js.map