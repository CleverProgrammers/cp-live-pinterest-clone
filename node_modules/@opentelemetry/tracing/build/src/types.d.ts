import { TextMapPropagator, Logger, Sampler } from '@opentelemetry/api';
import { LogLevel, IdGenerator } from '@opentelemetry/core';
import { ContextManager } from '@opentelemetry/context-base';
import { Resource } from '@opentelemetry/resources';
/**
 * TracerConfig provides an interface for configuring a Basic Tracer.
 */
export interface TracerConfig {
    /**
     * User provided logger.
     */
    logger?: Logger;
    /** level of logger.  */
    logLevel?: LogLevel;
    /**
     * Sampler determines if a span should be recorded or should be a NoopSpan.
     */
    sampler?: Sampler;
    /** Trace Parameters */
    traceParams?: TraceParams;
    /** Resource associated with trace telemetry  */
    resource?: Resource;
    /** Bool for whether or not graceful shutdown is enabled. If disabled spans will not be exported when SIGTERM is recieved */
    gracefulShutdown?: boolean;
    /**
     * Generator of trace and span IDs
     * The default idGenerator generates random ids
     */
    idGenerator?: IdGenerator;
}
/**
 * Configuration options for registering the API with the SDK.
 * Undefined values may be substituted for defaults, and null
 * values will not be registered.
 */
export interface SDKRegistrationConfig {
    /** Propagator to register as the global propagator */
    propagator?: TextMapPropagator | null;
    /** Context manager to register as the global context manager */
    contextManager?: ContextManager | null;
}
/** Global configuration of trace service */
export interface TraceParams {
    /** numberOfAttributesPerSpan is number of attributes per span */
    numberOfAttributesPerSpan?: number;
    /** numberOfLinksPerSpan is number of links per span */
    numberOfLinksPerSpan?: number;
    /** numberOfEventsPerSpan is number of message events per span */
    numberOfEventsPerSpan?: number;
}
/** Interface configuration for a buffer. */
export interface BufferConfig {
    /** Maximum size of a buffer. */
    bufferSize?: number;
    /** Max time for a buffer can wait before being sent */
    bufferTimeout?: number;
}
//# sourceMappingURL=types.d.ts.map