import { MeterProvider } from '../..';
import { Logger } from '../../common/Logger';
import { TracerProvider } from '../tracer_provider';
/** Interface BasePlugin to apply patch. */
export interface BasePlugin<T = any> {
    /** Instrumentation Name  */
    instrumentationName: string;
    /** Instrumentation Versionn  */
    instrumentationVersion: string;
    /** Module definition  */
    module: BasePluginModuleDefinition | BasePluginModuleDefinition[];
    /** Method to disable the instrumentation  */
    disable(): void;
    /** Method to enable the instrumentation  */
    enable(): void;
    /** Method to patch the instrumentation  */
    patch<T>(exports: T, name: string, baseDir?: string): T;
    /** Method to set tracer provider  */
    setTracerProvider(tracerProvider: TracerProvider): void;
    /** Method to set meter provider  */
    setMeterProvider(meterProvider: MeterProvider): void;
    /**
     * Contains all supported versions.
     * All versions must be compatible with [semver](https://semver.org/spec/v2.0.0.html) format.
     * If the version is not supported, we won't apply instrumentation patch (see `enable` method).
     * If omitted, all versions of the module will be patched.
     */
    supportedVersions?: string[];
    /** Method to unpatch the instrumentation  */
    unpatch(): void;
}
export interface BasePluginConfig {
    /**
     * Whether to enable the plugin.
     * @default true
     */
    enabled?: boolean;
    logger?: Logger;
    /**
     * Request methods that match any string in ignoreMethods will not be traced.
     */
    ignoreMethods?: string[];
    /**
     * Path of the trace plugin to load.
     * @default '@opentelemetry/plugin-http' in case of http.
     */
    path?: string;
}
export interface BasePluginModuleFile {
    /** Name of file to be patched with relative path */
    name: string;
    /** Method to patch the instrumentation  */
    patch<T>(exports: T): T;
    /** Method to unpatch the instrumentation  */
    unpatch(): void;
}
export interface BasePluginModuleDefinition {
    /** Module name  */
    name: string;
    /** Module internal files to be patched  */
    files?: BasePluginModuleFile[];
    /** Supported version of module  */
    supportedVersions?: string[];
}
//# sourceMappingURL=BasePlugin.d.ts.map