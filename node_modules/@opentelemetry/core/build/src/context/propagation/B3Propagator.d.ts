import { Context, GetterFunction, TextMapPropagator, SetterFunction } from '@opentelemetry/api';
/** Enumeraion of B3 inject encodings */
export declare enum B3InjectEncoding {
    SINGLE_HEADER = 0,
    MULTI_HEADER = 1
}
/** Configuration for the B3Propagator */
export interface B3PropagatorConfig {
    injectEncoding?: B3InjectEncoding;
}
/**
 * Propagator that extracts B3 context in both single and multi-header variants,
 * with configurable injection format defaulting to B3 single-header. Due to
 * the asymmetry in injection and extraction formats this is not suitable to
 * be implemented as a composite propagator.
 * Based on: https://github.com/openzipkin/b3-propagation
 */
export declare class B3Propagator implements TextMapPropagator {
    private readonly _b3MultiPropagator;
    private readonly _b3SinglePropagator;
    private readonly _inject;
    constructor(config?: B3PropagatorConfig);
    inject(context: Context, carrier: unknown, setter: SetterFunction): void;
    extract(context: Context, carrier: unknown, getter: GetterFunction): Context;
}
//# sourceMappingURL=B3Propagator.d.ts.map